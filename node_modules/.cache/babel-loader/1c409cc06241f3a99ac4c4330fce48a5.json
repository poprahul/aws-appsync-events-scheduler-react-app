{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { GraphQLObjectType, GraphQLEnumType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nimport { GraphQLList, GraphQLNonNull } from '../type/wrappers';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from '../language/directiveLocation';\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  isIntrospection: true,\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  isIntrospection: true,\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation)))\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      },\n      // NOTE: the following three fields are deprecated and are no longer part\n      // of the GraphQL specification.\n      onOperation: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(DirectiveLocation.SUBSCRIPTION) !== -1;\n        }\n      },\n      onFragment: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(DirectiveLocation.FRAGMENT_DEFINITION) !== -1;\n        }\n      },\n      onField: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.FIELD) !== -1;\n        }\n      }\n    };\n  }\n});\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  isIntrospection: true,\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  isIntrospection: true,\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          }\n\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: {\n        type: GraphQLString\n      },\n      description: {\n        type: GraphQLString\n      },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: {\n        type: __Type\n      }\n    };\n  }\n});\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  isIntrospection: true,\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type)\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean)\n      },\n      deprecationReason: {\n        type: GraphQLString\n      }\n    };\n  }\n});\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  isIntrospection: true,\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      type: {\n        type: GraphQLNonNull(__Type)\n      },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  isIntrospection: true,\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString)\n      },\n      description: {\n        type: GraphQLString\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean)\n      },\n      deprecationReason: {\n        type: GraphQLString\n      }\n    };\n  }\n});\nexport var TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  isIntrospection: true,\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    type: GraphQLNonNull(GraphQLString)\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\nexport var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && ( // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/type/introspection.js"],"names":["isInvalid","objectValues","astFromValue","print","GraphQLObjectType","GraphQLEnumType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isAbstractType","isNamedType","GraphQLList","GraphQLNonNull","GraphQLString","GraphQLBoolean","DirectiveLocation","__Schema","name","isIntrospection","description","fields","types","type","__Type","resolve","schema","getTypeMap","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","directives","__Directive","getDirectives","locations","__DirectiveLocation","args","__InputValue","directive","onOperation","deprecationReason","d","indexOf","QUERY","MUTATION","SUBSCRIPTION","onFragment","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","onField","FIELD","values","value","SCHEMA","SCALAR","OBJECT","FIELD_DEFINITION","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","kind","__TypeKind","TypeKind","LIST","NON_NULL","Error","__Field","includeDeprecated","defaultValue","_ref","getFields","filter","field","interfaces","getInterfaces","possibleTypes","context","_ref2","getPossibleTypes","enumValues","__EnumValue","_ref3","getValues","inputFields","ofType","isDeprecated","inputVal","SchemaMetaFieldDef","source","_ref4","TypeMetaFieldDef","_ref5","_ref6","getType","TypeNameMetaFieldDef","_ref7","parentType","introspectionTypes","isIntrospectionType"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { GraphQLObjectType, GraphQLEnumType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nimport { GraphQLList, GraphQLNonNull } from '../type/wrappers';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from '../language/directiveLocation';\n\n\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  isIntrospection: true,\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\n\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  isIntrospection: true,\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: { type: GraphQLNonNull(GraphQLString) },\n      description: { type: GraphQLString },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation)))\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      },\n      // NOTE: the following three fields are deprecated and are no longer part\n      // of the GraphQL specification.\n      onOperation: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(DirectiveLocation.SUBSCRIPTION) !== -1;\n        }\n      },\n      onFragment: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(DirectiveLocation.FRAGMENT_DEFINITION) !== -1;\n        }\n      },\n      onField: {\n        deprecationReason: 'Use `locations`.',\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(DirectiveLocation.FIELD) !== -1;\n        }\n      }\n    };\n  }\n});\n\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  isIntrospection: true,\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\n\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  isIntrospection: true,\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          }\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: { type: GraphQLString },\n      description: { type: GraphQLString },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: { type: GraphQLBoolean, defaultValue: false }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n            return fields;\n          }\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: { type: GraphQLBoolean, defaultValue: false }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: { type: __Type }\n    };\n  }\n});\n\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  isIntrospection: true,\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: { type: GraphQLNonNull(GraphQLString) },\n      description: { type: GraphQLString },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: { type: GraphQLNonNull(__Type) },\n      isDeprecated: { type: GraphQLNonNull(GraphQLBoolean) },\n      deprecationReason: {\n        type: GraphQLString\n      }\n    };\n  }\n});\n\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  isIntrospection: true,\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: { type: GraphQLNonNull(GraphQLString) },\n      description: { type: GraphQLString },\n      type: { type: GraphQLNonNull(__Type) },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\n\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  isIntrospection: true,\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: { type: GraphQLNonNull(GraphQLString) },\n      description: { type: GraphQLString },\n      isDeprecated: { type: GraphQLNonNull(GraphQLBoolean) },\n      deprecationReason: {\n        type: GraphQLString\n      }\n    };\n  }\n});\n\nexport var TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\n\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  isIntrospection: true,\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'\n    }\n  }\n});\n\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\n\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{ name: 'name', type: GraphQLNonNull(GraphQLString) }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\n\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\n\nexport var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\n\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && (\n  // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}"]},"metadata":{},"sourceType":"module"}