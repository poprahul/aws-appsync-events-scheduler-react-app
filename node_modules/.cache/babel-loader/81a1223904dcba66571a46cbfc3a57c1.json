{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.separateOperations = separateOperations;\n\nvar _visitor = require('../language/visitor');\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\n\nfunction separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName = void 0;\n  var idx = 0; // Populate metadata and build a dependency graph.\n\n  (0, _visitor.visit)(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  }); // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  var separatedDocumentASTs = Object.create(null);\n  operations.forEach(function (operation) {\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    var definitions = [operation];\n    Object.keys(dependencies).forEach(function (name) {\n      definitions.push(fragments[name]);\n    });\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  });\n  return separatedDocumentASTs;\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// Provides the empty string for anonymous operations.\n\n\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n\n  if (immediateDeps) {\n    Object.keys(immediateDeps).forEach(function (toName) {\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/separateOperations.js"],"names":["Object","defineProperty","exports","value","separateOperations","_visitor","require","documentAST","operations","fragments","create","positions","Map","depGraph","fromName","idx","visit","OperationDefinition","node","opName","push","set","FragmentDefinition","name","FragmentSpread","toName","separatedDocumentASTs","forEach","operation","operationName","dependencies","collectTransitiveDependencies","definitions","keys","sort","n1","n2","get","kind","collected","immediateDeps"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.separateOperations = separateOperations;\n\nvar _visitor = require('../language/visitor');\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nfunction separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName = void 0;\n  var idx = 0;\n\n  // Populate metadata and build a dependency graph.\n  (0, _visitor.visit)(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  });\n\n  // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n  var separatedDocumentASTs = Object.create(null);\n  operations.forEach(function (operation) {\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName);\n\n    // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n    var definitions = [operation];\n    Object.keys(dependencies).forEach(function (name) {\n      definitions.push(fragments[name]);\n    });\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  });\n\n  return separatedDocumentASTs;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n  if (immediateDeps) {\n    Object.keys(immediateDeps).forEach(function (toName) {\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    });\n  }\n}"]},"metadata":{},"sourceType":"script"}