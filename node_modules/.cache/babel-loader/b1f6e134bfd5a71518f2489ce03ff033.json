{"ast":null,"code":"\"use strict\";\n\nvar fakeNullFiber = new function Fiber() {}();\nvar localKey = \"_optimism_local\";\n\nfunction getCurrentFiber() {\n  return fakeNullFiber;\n}\n\nif (typeof module === \"object\") {\n  try {\n    var Fiber = module[\"eriuqer\".split(\"\").reverse().join(\"\")](\"fibers\"); // If we were able to require fibers, redefine the getCurrentFiber\n    // function so that it has a chance to return Fiber.current.\n\n    getCurrentFiber = function () {\n      return Fiber.current || fakeNullFiber;\n    };\n  } catch (e) {}\n} // Returns an object unique to Fiber.current, if fibers are enabled.\n// This object is used for Fiber-local storage in ./entry.js.\n\n\nexports.get = function () {\n  var fiber = getCurrentFiber();\n  return fiber[localKey] || (fiber[localKey] = Object.create(null));\n};","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/optimism/lib/local.js"],"names":["fakeNullFiber","Fiber","localKey","getCurrentFiber","module","split","reverse","join","current","e","exports","get","fiber","Object","create"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAG,IAAK,SAASC,KAAT,GAAgB,CAAE,CAAvB,EAApB;AACA,IAAIC,QAAQ,GAAG,iBAAf;;AAEA,SAASC,eAAT,GAA2B;AACzB,SAAOH,aAAP;AACD;;AAED,IAAI,OAAOI,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,MAAI;AACF,QAAIH,KAAK,GAAGG,MAAM,CAAC,UAAUC,KAAV,CAAgB,EAAhB,EAAoBC,OAApB,GAA8BC,IAA9B,CAAmC,EAAnC,CAAD,CAAN,CAA+C,QAA/C,CAAZ,CADE,CAEF;AACA;;AACAJ,IAAAA,eAAe,GAAG,YAAY;AAC5B,aAAOF,KAAK,CAACO,OAAN,IAAiBR,aAAxB;AACD,KAFD;AAGD,GAPD,CAOE,OAAOS,CAAP,EAAU,CAAE;AACf,C,CAED;AACA;;;AACAC,OAAO,CAACC,GAAR,GAAc,YAAY;AACxB,MAAIC,KAAK,GAAGT,eAAe,EAA3B;AACA,SAAOS,KAAK,CAACV,QAAD,CAAL,KAAoBU,KAAK,CAACV,QAAD,CAAL,GAAkBW,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtC,CAAP;AACD,CAHD","sourcesContent":["\"use strict\";\n\nvar fakeNullFiber = new (function Fiber(){});\nvar localKey = \"_optimism_local\";\n\nfunction getCurrentFiber() {\n  return fakeNullFiber;\n}\n\nif (typeof module === \"object\") {\n  try {\n    var Fiber = module[\"eriuqer\".split(\"\").reverse().join(\"\")](\"fibers\");\n    // If we were able to require fibers, redefine the getCurrentFiber\n    // function so that it has a chance to return Fiber.current.\n    getCurrentFiber = function () {\n      return Fiber.current || fakeNullFiber;\n    };\n  } catch (e) {}\n}\n\n// Returns an object unique to Fiber.current, if fibers are enabled.\n// This object is used for Fiber-local storage in ./entry.js.\nexports.get = function () {\n  var fiber = getCurrentFiber();\n  return fiber[localKey] || (fiber[localKey] = Object.create(null));\n};\n"]},"metadata":{},"sourceType":"script"}