{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nexport function unusedFragMessage(fragName) {\n  return 'Fragment \"' + fragName + '\" is never used.';\n}\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\n\nexport function NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n        operationDefs.forEach(function (operation) {\n          context.getRecursivelyReferencedFragments(operation).forEach(function (fragment) {\n            fragmentNameUsed[fragment.name.value] = true;\n          });\n        });\n        fragmentDefs.forEach(function (fragmentDef) {\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(unusedFragMessage(fragName), [fragmentDef]));\n          }\n        });\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/NoUnusedFragments.js"],"names":["GraphQLError","unusedFragMessage","fragName","NoUnusedFragments","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","Object","create","forEach","operation","getRecursivelyReferencedFragments","fragment","name","value","fragmentDef","reportError"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AAC1C,SAAO,eAAeA,QAAf,GAA0B,kBAAjC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEA,SAAO;AACLC,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AACtDH,MAAAA,aAAa,CAACI,IAAd,CAAmBD,IAAnB;AACA,aAAO,KAAP;AACD,KAJI;AAKLE,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BF,IAA5B,EAAkC;AACpDF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,IAAlB;AACA,aAAO,KAAP;AACD,KARI;AAULG,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,YAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;AACAV,QAAAA,aAAa,CAACW,OAAd,CAAsB,UAAUC,SAAV,EAAqB;AACzCb,UAAAA,OAAO,CAACc,iCAAR,CAA0CD,SAA1C,EAAqDD,OAArD,CAA6D,UAAUG,QAAV,EAAoB;AAC/EN,YAAAA,gBAAgB,CAACM,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,GAAwC,IAAxC;AACD,WAFD;AAGD,SAJD;AAMAf,QAAAA,YAAY,CAACU,OAAb,CAAqB,UAAUM,WAAV,EAAuB;AAC1C,cAAIpB,QAAQ,GAAGoB,WAAW,CAACF,IAAZ,CAAiBC,KAAhC;;AACA,cAAIR,gBAAgB,CAACX,QAAD,CAAhB,KAA+B,IAAnC,EAAyC;AACvCE,YAAAA,OAAO,CAACmB,WAAR,CAAoB,IAAIvB,YAAJ,CAAiBC,iBAAiB,CAACC,QAAD,CAAlC,EAA8C,CAACoB,WAAD,CAA9C,CAApB;AACD;AACF,SALD;AAMD;AAfO;AAVL,GAAP;AA4BD","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nexport function unusedFragMessage(fragName) {\n  return 'Fragment \"' + fragName + '\" is never used.';\n}\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nexport function NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n        operationDefs.forEach(function (operation) {\n          context.getRecursivelyReferencedFragments(operation).forEach(function (fragment) {\n            fragmentNameUsed[fragment.name.value] = true;\n          });\n        });\n\n        fragmentDefs.forEach(function (fragmentDef) {\n          var fragName = fragmentDef.name.value;\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(unusedFragMessage(fragName), [fragmentDef]));\n          }\n        });\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}