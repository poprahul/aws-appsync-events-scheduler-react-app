{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;\nexports.VariablesAreInputTypes = VariablesAreInputTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !(0, _definition.isInputType)(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/validation/rules/VariablesAreInputTypes.js"],"names":["Object","defineProperty","exports","value","nonInputTypeOnVarMessage","VariablesAreInputTypes","_error","require","_printer","_definition","_typeFromAST","variableName","typeName","context","VariableDefinition","node","type","typeFromAST","getSchema","isInputType","variable","name","reportError","GraphQLError","print"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACAF,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIG,YAAY,GAAGH,OAAO,CAAC,6BAAD,CAA1B;;AAEA,SAASH,wBAAT,CAAkCO,YAAlC,EAAgDC,QAAhD,EAA0D;AACxD,SAAO,gBAAgBD,YAAhB,GAA+B,8BAA/B,GAAgEC,QAAhE,GAA2E,IAAlF;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASP,sBAAT,CAAgCQ,OAAhC,EAAyC;AACvC,SAAO;AACLC,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpD,UAAIC,IAAI,GAAG,CAAC,GAAGN,YAAY,CAACO,WAAjB,EAA8BJ,OAAO,CAACK,SAAR,EAA9B,EAAmDH,IAAI,CAACC,IAAxD,CAAX,CADoD,CAGpD;;AACA,UAAIA,IAAI,IAAI,CAAC,CAAC,GAAGP,WAAW,CAACU,WAAhB,EAA6BH,IAA7B,CAAb,EAAiD;AAC/C,YAAIL,YAAY,GAAGI,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmBlB,KAAtC;AACAU,QAAAA,OAAO,CAACS,WAAR,CAAoB,IAAIhB,MAAM,CAACiB,YAAX,CAAwBnB,wBAAwB,CAACO,YAAD,EAAe,CAAC,GAAGH,QAAQ,CAACgB,KAAb,EAAoBT,IAAI,CAACC,IAAzB,CAAf,CAAhD,EAAgG,CAACD,IAAI,CAACC,IAAN,CAAhG,CAApB;AACD;AACF;AATI,GAAP;AAWD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;\nexports.VariablesAreInputTypes = VariablesAreInputTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);\n\n      // If the variable type is not an input type, return an error.\n      if (type && !(0, _definition.isInputType)(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}