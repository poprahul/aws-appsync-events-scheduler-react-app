{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nexports.isValidJSValue = isValidJSValue;\n\nvar _iterall = require('iterall');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Given a JavaScript value and a GraphQL type, determine if the value will be\n * accepted for that type. This is primarily useful for validating the\n * runtime values of query variables.\n */\n\n\nfunction isValidJSValue(value, type) {\n  // A value must be provided if the type is non-null.\n  if (type instanceof _definition.GraphQLNonNull) {\n    if ((0, _isNullish2.default)(value)) {\n      return ['Expected \"' + String(type) + '\", found null.'];\n    }\n\n    return isValidJSValue(value, type.ofType);\n  }\n\n  if ((0, _isNullish2.default)(value)) {\n    return [];\n  } // Lists accept a non-list value as a list of one.\n\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n\n    if ((0, _iterall.isCollection)(value)) {\n      var errors = [];\n      (0, _iterall.forEach)(value, function (item, index) {\n        errors.push.apply(errors, isValidJSValue(item, itemType).map(function (error) {\n          return 'In element #' + index + ': ' + error;\n        }));\n      });\n      return errors;\n    }\n\n    return isValidJSValue(value, itemType);\n  } // Input objects check each defined field.\n\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {\n      return ['Expected \"' + type.name + '\", found not an object.'];\n    }\n\n    var fields = type.getFields();\n    var _errors = []; // Ensure every provided field is defined.\n\n    Object.keys(value).forEach(function (providedField) {\n      if (!fields[providedField]) {\n        _errors.push('In field \"' + providedField + '\": Unknown field.');\n      }\n    }); // Ensure every defined field is valid.\n\n    Object.keys(fields).forEach(function (fieldName) {\n      var newErrors = isValidJSValue(value[fieldName], fields[fieldName].type);\n\n      _errors.push.apply(_errors, newErrors.map(function (error) {\n        return 'In field \"' + fieldName + '\": ' + error;\n      }));\n    });\n    return _errors;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0; // Scalar/Enum input checks to ensure the type can parse the value to\n  // a non-null value.\n\n  try {\n    var parseResult = type.parseValue(value);\n\n    if ((0, _isNullish2.default)(parseResult) && !type.isValidValue(value)) {\n      return ['Expected type \"' + type.name + '\", found ' + JSON.stringify(value) + '.'];\n    }\n  } catch (error) {\n    return ['Expected type \"' + type.name + '\", found ' + JSON.stringify(value) + ': ' + error.message];\n  }\n\n  return [];\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/isValidJSValue.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","isValidJSValue","_iterall","require","_invariant","_invariant2","_interopRequireDefault","_isNullish","_isNullish2","_definition","__esModule","default","type","GraphQLNonNull","String","ofType","GraphQLList","itemType","isCollection","errors","forEach","item","index","push","apply","map","error","GraphQLInputObjectType","name","fields","getFields","_errors","keys","providedField","fieldName","newErrors","GraphQLScalarType","GraphQLEnumType","parseResult","parseValue","isValidValue","JSON","stringify","message"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.isValidJSValue = isValidJSValue;\n\nvar _iterall = require('iterall');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a JavaScript value and a GraphQL type, determine if the value will be\n * accepted for that type. This is primarily useful for validating the\n * runtime values of query variables.\n */\nfunction isValidJSValue(value, type) {\n  // A value must be provided if the type is non-null.\n  if (type instanceof _definition.GraphQLNonNull) {\n    if ((0, _isNullish2.default)(value)) {\n      return ['Expected \"' + String(type) + '\", found null.'];\n    }\n    return isValidJSValue(value, type.ofType);\n  }\n\n  if ((0, _isNullish2.default)(value)) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(value)) {\n      var errors = [];\n      (0, _iterall.forEach)(value, function (item, index) {\n        errors.push.apply(errors, isValidJSValue(item, itemType).map(function (error) {\n          return 'In element #' + index + ': ' + error;\n        }));\n      });\n      return errors;\n    }\n    return isValidJSValue(value, itemType);\n  }\n\n  // Input objects check each defined field.\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {\n      return ['Expected \"' + type.name + '\", found not an object.'];\n    }\n    var fields = type.getFields();\n\n    var _errors = [];\n\n    // Ensure every provided field is defined.\n    Object.keys(value).forEach(function (providedField) {\n      if (!fields[providedField]) {\n        _errors.push('In field \"' + providedField + '\": Unknown field.');\n      }\n    });\n\n    // Ensure every defined field is valid.\n    Object.keys(fields).forEach(function (fieldName) {\n      var newErrors = isValidJSValue(value[fieldName], fields[fieldName].type);\n      _errors.push.apply(_errors, newErrors.map(function (error) {\n        return 'In field \"' + fieldName + '\": ' + error;\n      }));\n    });\n\n    return _errors;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n\n  // Scalar/Enum input checks to ensure the type can parse the value to\n  // a non-null value.\n  try {\n    var parseResult = type.parseValue(value);\n    if ((0, _isNullish2.default)(parseResult) && !type.isValidValue(value)) {\n      return ['Expected type \"' + type.name + '\", found ' + JSON.stringify(value) + '.'];\n    }\n  } catch (error) {\n    return ['Expected type \"' + type.name + '\", found ' + JSON.stringify(value) + ': ' + error.message];\n  }\n\n  return [];\n}"]},"metadata":{},"sourceType":"script"}