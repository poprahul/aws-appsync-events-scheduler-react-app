{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\n\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      if (node.typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js"],"names":["Object","defineProperty","exports","value","inlineFragmentOnNonCompositeErrorMessage","fragmentOnNonCompositeErrorMessage","FragmentsOnCompositeTypes","_error","require","_printer","_definition","_typeFromAST","type","String","fragName","context","InlineFragment","node","typeCondition","typeFromAST","getSchema","isCompositeType","reportError","GraphQLError","print","FragmentDefinition","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wCAAR,GAAmDA,wCAAnD;AACAF,OAAO,CAACG,kCAAR,GAA6CA,kCAA7C;AACAH,OAAO,CAACI,yBAAR,GAAoCA,yBAApC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIG,YAAY,GAAGH,OAAO,CAAC,6BAAD,CAA1B;;AAEA,SAASJ,wCAAT,CAAkDQ,IAAlD,EAAwD;AACtD,SAAO,sDAAsDC,MAAM,CAACD,IAAD,CAA5D,GAAqE,IAA5E;AACD;AAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASP,kCAAT,CAA4CS,QAA5C,EAAsDF,IAAtD,EAA4D;AAC1D,SAAO,eAAeE,QAAf,GAA0B,sCAA1B,IAAoE,WAAWD,MAAM,CAACD,IAAD,CAAjB,GAA0B,IAA9F,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,yBAAT,CAAmCS,OAAnC,EAA4C;AAC1C,SAAO;AACLC,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC5C,UAAIA,IAAI,CAACC,aAAT,EAAwB;AACtB,YAAIN,IAAI,GAAG,CAAC,GAAGD,YAAY,CAACQ,WAAjB,EAA8BJ,OAAO,CAACK,SAAR,EAA9B,EAAmDH,IAAI,CAACC,aAAxD,CAAX;;AACA,YAAIN,IAAI,IAAI,CAAC,CAAC,GAAGF,WAAW,CAACW,eAAhB,EAAiCT,IAAjC,CAAb,EAAqD;AACnDG,UAAAA,OAAO,CAACO,WAAR,CAAoB,IAAIf,MAAM,CAACgB,YAAX,CAAwBnB,wCAAwC,CAAC,CAAC,GAAGK,QAAQ,CAACe,KAAb,EAAoBP,IAAI,CAACC,aAAzB,CAAD,CAAhE,EAA2G,CAACD,IAAI,CAACC,aAAN,CAA3G,CAApB;AACD;AACF;AACF,KARI;AASLO,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BR,IAA5B,EAAkC;AACpD,UAAIL,IAAI,GAAG,CAAC,GAAGD,YAAY,CAACQ,WAAjB,EAA8BJ,OAAO,CAACK,SAAR,EAA9B,EAAmDH,IAAI,CAACC,aAAxD,CAAX;;AACA,UAAIN,IAAI,IAAI,CAAC,CAAC,GAAGF,WAAW,CAACW,eAAhB,EAAiCT,IAAjC,CAAb,EAAqD;AACnDG,QAAAA,OAAO,CAACO,WAAR,CAAoB,IAAIf,MAAM,CAACgB,YAAX,CAAwBlB,kCAAkC,CAACY,IAAI,CAACS,IAAL,CAAUvB,KAAX,EAAkB,CAAC,GAAGM,QAAQ,CAACe,KAAb,EAAoBP,IAAI,CAACC,aAAzB,CAAlB,CAA1D,EAAsH,CAACD,IAAI,CAACC,aAAN,CAAtH,CAApB;AACD;AACF;AAdI,GAAP;AAgBD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      if (node.typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}