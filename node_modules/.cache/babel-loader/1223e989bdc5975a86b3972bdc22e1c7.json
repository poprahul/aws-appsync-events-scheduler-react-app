{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { getNamedType } from '../type/definition';\nimport { GraphQLSchema } from '../type/schema';\nimport { TypeInfo } from './TypeInfo';\n/**\n * A validation rule which reports deprecated usages.\n *\n * Returns a list of GraphQLError instances describing each deprecated use.\n */\n\nexport function findDeprecatedUsages(schema, ast) {\n  var errors = [];\n  var typeInfo = new TypeInfo(schema);\n  visit(ast, visitWithTypeInfo(typeInfo, {\n    Field: function Field(node) {\n      var fieldDef = typeInfo.getFieldDef();\n\n      if (fieldDef && fieldDef.isDeprecated) {\n        var parentType = typeInfo.getParentType();\n\n        if (parentType) {\n          var reason = fieldDef.deprecationReason;\n          errors.push(new GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumVal = typeInfo.getEnumValue();\n\n      if (enumVal && enumVal.isDeprecated) {\n        var type = getNamedType(typeInfo.getInputType());\n\n        if (type) {\n          var reason = enumVal.deprecationReason;\n          errors.push(new GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    }\n  }));\n  return errors;\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/utilities/findDeprecatedUsages.js"],"names":["GraphQLError","visit","visitWithTypeInfo","getNamedType","GraphQLSchema","TypeInfo","findDeprecatedUsages","schema","ast","errors","typeInfo","Field","node","fieldDef","getFieldDef","isDeprecated","parentType","getParentType","reason","deprecationReason","push","name","EnumValue","enumVal","getEnumValue","type","getInputType"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,KAAT,EAAgBC,iBAAhB,QAAyC,qBAAzC;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,GAAtC,EAA2C;AAChD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,IAAIL,QAAJ,CAAaE,MAAb,CAAf;AAEAN,EAAAA,KAAK,CAACO,GAAD,EAAMN,iBAAiB,CAACQ,QAAD,EAAW;AACrCC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,UAAIC,QAAQ,GAAGH,QAAQ,CAACI,WAAT,EAAf;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAACE,YAAzB,EAAuC;AACrC,YAAIC,UAAU,GAAGN,QAAQ,CAACO,aAAT,EAAjB;;AACA,YAAID,UAAJ,EAAgB;AACd,cAAIE,MAAM,GAAGL,QAAQ,CAACM,iBAAtB;AACAV,UAAAA,MAAM,CAACW,IAAP,CAAY,IAAIpB,YAAJ,CAAiB,eAAegB,UAAU,CAACK,IAA1B,GAAiC,GAAjC,GAAuCR,QAAQ,CAACQ,IAAhD,GAAuD,iBAAvD,IAA4EH,MAAM,GAAG,MAAMA,MAAT,GAAkB,EAApG,CAAjB,EAA0H,CAACN,IAAD,CAA1H,CAAZ;AACD;AACF;AACF,KAVoC;AAWrCU,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBV,IAAnB,EAAyB;AAClC,UAAIW,OAAO,GAAGb,QAAQ,CAACc,YAAT,EAAd;;AACA,UAAID,OAAO,IAAIA,OAAO,CAACR,YAAvB,EAAqC;AACnC,YAAIU,IAAI,GAAGtB,YAAY,CAACO,QAAQ,CAACgB,YAAT,EAAD,CAAvB;;AACA,YAAID,IAAJ,EAAU;AACR,cAAIP,MAAM,GAAGK,OAAO,CAACJ,iBAArB;AACAV,UAAAA,MAAM,CAACW,IAAP,CAAY,IAAIpB,YAAJ,CAAiB,oBAAoByB,IAAI,CAACJ,IAAzB,GAAgC,GAAhC,GAAsCE,OAAO,CAACF,IAA9C,GAAqD,iBAArD,IAA0EH,MAAM,GAAG,MAAMA,MAAT,GAAkB,EAAlG,CAAjB,EAAwH,CAACN,IAAD,CAAxH,CAAZ;AACD;AACF;AACF;AApBoC,GAAX,CAAvB,CAAL;AAuBA,SAAOH,MAAP;AACD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { GraphQLError } from '../error/GraphQLError';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\n\nimport { getNamedType } from '../type/definition';\nimport { GraphQLSchema } from '../type/schema';\nimport { TypeInfo } from './TypeInfo';\n\n/**\n * A validation rule which reports deprecated usages.\n *\n * Returns a list of GraphQLError instances describing each deprecated use.\n */\nexport function findDeprecatedUsages(schema, ast) {\n  var errors = [];\n  var typeInfo = new TypeInfo(schema);\n\n  visit(ast, visitWithTypeInfo(typeInfo, {\n    Field: function Field(node) {\n      var fieldDef = typeInfo.getFieldDef();\n      if (fieldDef && fieldDef.isDeprecated) {\n        var parentType = typeInfo.getParentType();\n        if (parentType) {\n          var reason = fieldDef.deprecationReason;\n          errors.push(new GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumVal = typeInfo.getEnumValue();\n      if (enumVal && enumVal.isDeprecated) {\n        var type = getNamedType(typeInfo.getInputType());\n        if (type) {\n          var reason = enumVal.deprecationReason;\n          errors.push(new GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    }\n  }));\n\n  return errors;\n}"]},"metadata":{},"sourceType":"module"}