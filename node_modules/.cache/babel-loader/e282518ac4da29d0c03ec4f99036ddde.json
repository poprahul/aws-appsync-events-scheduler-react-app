{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { print } from '../../language/printer';\nimport { isCompositeType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n}\nexport function fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\nexport function FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), [typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/FragmentsOnCompositeTypes.js"],"names":["GraphQLError","print","isCompositeType","typeFromAST","inlineFragmentOnNonCompositeErrorMessage","type","String","fragmentOnNonCompositeErrorMessage","fragName","FragmentsOnCompositeTypes","context","InlineFragment","node","typeCondition","getSchema","reportError","FragmentDefinition","name","value"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,QAAsB,wBAAtB;AAEA,SAASC,eAAT,QAAgC,uBAAhC;AAEA,SAASC,WAAT,QAA4B,6BAA5B;AAEA,OAAO,SAASC,wCAAT,CAAkDC,IAAlD,EAAwD;AAC7D,SAAO,sDAAsDC,MAAM,CAACD,IAAD,CAA5D,GAAqE,IAA5E;AACD;AAED,OAAO,SAASE,kCAAT,CAA4CC,QAA5C,EAAsDH,IAAtD,EAA4D;AACjE,SAAO,eAAeG,QAAf,GAA0B,sCAA1B,IAAoE,WAAWF,MAAM,CAACD,IAAD,CAAjB,GAA0B,IAA9F,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,yBAAT,CAAmCC,OAAnC,EAA4C;AACjD,SAAO;AACLC,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC5C,UAAIC,aAAa,GAAGD,IAAI,CAACC,aAAzB;;AACA,UAAIA,aAAJ,EAAmB;AACjB,YAAIR,IAAI,GAAGF,WAAW,CAACO,OAAO,CAACI,SAAR,EAAD,EAAsBD,aAAtB,CAAtB;;AACA,YAAIR,IAAI,IAAI,CAACH,eAAe,CAACG,IAAD,CAA5B,EAAoC;AAClCK,UAAAA,OAAO,CAACK,WAAR,CAAoB,IAAIf,YAAJ,CAAiBI,wCAAwC,CAACH,KAAK,CAACY,aAAD,CAAN,CAAzD,EAAiF,CAACA,aAAD,CAAjF,CAApB;AACD;AACF;AACF,KATI;AAULG,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BJ,IAA5B,EAAkC;AACpD,UAAIP,IAAI,GAAGF,WAAW,CAACO,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,aAA3B,CAAtB;;AACA,UAAIR,IAAI,IAAI,CAACH,eAAe,CAACG,IAAD,CAA5B,EAAoC;AAClCK,QAAAA,OAAO,CAACK,WAAR,CAAoB,IAAIf,YAAJ,CAAiBO,kCAAkC,CAACK,IAAI,CAACK,IAAL,CAAUC,KAAX,EAAkBjB,KAAK,CAACW,IAAI,CAACC,aAAN,CAAvB,CAAnD,EAAiG,CAACD,IAAI,CAACC,aAAN,CAAjG,CAApB;AACD;AACF;AAfI,GAAP;AAiBD","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport { print } from '../../language/printer';\n\nimport { isCompositeType } from '../../type/definition';\n\nimport { typeFromAST } from '../../utilities/typeFromAST';\n\nexport function inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n}\n\nexport function fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n        if (type && !isCompositeType(type)) {\n          context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), [typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}