{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidLiteralValue = isValidLiteralValue;\n\nvar _printer = require('../language/printer');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * Utility for validators which determines if a value literal node is valid\n * given an input type.\n *\n * Note that this only validates literal values, variables are assumed to\n * provide values of the correct type.\n */\n\n\nfunction isValidLiteralValue(type, valueNode) {\n  // A value must be provided if the type is non-null.\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (!valueNode || valueNode.kind === Kind.NULL) {\n      return ['Expected \"' + String(type) + '\", found null.'];\n    }\n\n    return isValidLiteralValue(type.ofType, valueNode);\n  }\n\n  if (!valueNode || valueNode.kind === Kind.NULL) {\n    return [];\n  } // This function only tests literals, and assumes variables will provide\n  // values of the correct type.\n\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    return [];\n  } // Lists accept a non-list value as a list of one.\n\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      return valueNode.values.reduce(function (acc, item, index) {\n        var errors = isValidLiteralValue(itemType, item);\n        return acc.concat(errors.map(function (error) {\n          return 'In element #' + index + ': ' + error;\n        }));\n      }, []);\n    }\n\n    return isValidLiteralValue(itemType, valueNode);\n  } // Input objects check each defined field and look for undefined fields.\n\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return ['Expected \"' + type.name + '\", found not an object.'];\n    }\n\n    var fields = type.getFields();\n    var errors = []; // Ensure every provided field is defined.\n\n    var fieldNodes = valueNode.fields;\n    fieldNodes.forEach(function (providedFieldNode) {\n      if (!fields[providedFieldNode.name.value]) {\n        errors.push('In field \"' + providedFieldNode.name.value + '\": Unknown field.');\n      }\n    }); // Ensure every defined field is valid.\n\n    var fieldNodeMap = (0, _keyMap2.default)(fieldNodes, function (fieldNode) {\n      return fieldNode.name.value;\n    });\n    Object.keys(fields).forEach(function (fieldName) {\n      var result = isValidLiteralValue(fields[fieldName].type, fieldNodeMap[fieldName] && fieldNodeMap[fieldName].value);\n      errors.push.apply(errors, result.map(function (error) {\n        return 'In field \"' + fieldName + '\": ' + error;\n      }));\n    });\n    return errors;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0; // Scalars determine if a literal values is valid.\n\n  if (!type.isValidLiteral(valueNode)) {\n    return ['Expected type \"' + type.name + '\", found ' + (0, _printer.print)(valueNode) + '.'];\n  }\n\n  return [];\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/isValidLiteralValue.js"],"names":["Object","defineProperty","exports","value","isValidLiteralValue","_printer","require","_kinds","Kind","_interopRequireWildcard","_definition","_invariant","_invariant2","_interopRequireDefault","_keyMap","_keyMap2","obj","__esModule","default","newObj","key","prototype","hasOwnProperty","call","type","valueNode","GraphQLNonNull","kind","NULL","String","ofType","VARIABLE","GraphQLList","itemType","LIST","values","reduce","acc","item","index","errors","concat","map","error","GraphQLInputObjectType","OBJECT","name","fields","getFields","fieldNodes","forEach","providedFieldNode","push","fieldNodeMap","fieldNode","keys","fieldName","result","apply","GraphQLScalarType","GraphQLEnumType","isValidLiteral","print"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAApB;;AAEA,IAAIE,IAAI,GAAGC,uBAAuB,CAACF,MAAD,CAAlC;;AAEA,IAAIG,WAAW,GAAGJ,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAIK,UAAU,GAAGL,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAIM,WAAW,GAAGC,sBAAsB,CAACF,UAAD,CAAxC;;AAEA,IAAIG,OAAO,GAAGR,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIS,QAAQ,GAAGF,sBAAsB,CAACC,OAAD,CAArC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASP,uBAAT,CAAiCO,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIG,MAAM,GAAG,EAAb;;AAAiB,QAAIH,GAAG,IAAI,IAAX,EAAiB;AAAE,WAAK,IAAII,GAAT,IAAgBJ,GAAhB,EAAqB;AAAE,YAAIhB,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,GAArC,EAA0CI,GAA1C,CAAJ,EAAoDD,MAAM,CAACC,GAAD,CAAN,GAAcJ,GAAG,CAACI,GAAD,CAAjB;AAAyB;AAAE;;AAACD,IAAAA,MAAM,CAACD,OAAP,GAAiBF,GAAjB;AAAsB,WAAOG,MAAP;AAAgB;AAAE;AAE7Q;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASf,mBAAT,CAA6BoB,IAA7B,EAAmCC,SAAnC,EAA8C;AAC5C;AACA,MAAID,IAAI,YAAYd,WAAW,CAACgB,cAAhC,EAAgD;AAC9C,QAAI,CAACD,SAAD,IAAcA,SAAS,CAACE,IAAV,KAAmBnB,IAAI,CAACoB,IAA1C,EAAgD;AAC9C,aAAO,CAAC,eAAeC,MAAM,CAACL,IAAD,CAArB,GAA8B,gBAA/B,CAAP;AACD;;AACD,WAAOpB,mBAAmB,CAACoB,IAAI,CAACM,MAAN,EAAcL,SAAd,CAA1B;AACD;;AAED,MAAI,CAACA,SAAD,IAAcA,SAAS,CAACE,IAAV,KAAmBnB,IAAI,CAACoB,IAA1C,EAAgD;AAC9C,WAAO,EAAP;AACD,GAX2C,CAa5C;AACA;;;AACA,MAAIH,SAAS,CAACE,IAAV,KAAmBnB,IAAI,CAACuB,QAA5B,EAAsC;AACpC,WAAO,EAAP;AACD,GAjB2C,CAmB5C;;;AACA,MAAIP,IAAI,YAAYd,WAAW,CAACsB,WAAhC,EAA6C;AAC3C,QAAIC,QAAQ,GAAGT,IAAI,CAACM,MAApB;;AACA,QAAIL,SAAS,CAACE,IAAV,KAAmBnB,IAAI,CAAC0B,IAA5B,EAAkC;AAChC,aAAOT,SAAS,CAACU,MAAV,CAAiBC,MAAjB,CAAwB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACzD,YAAIC,MAAM,GAAGpC,mBAAmB,CAAC6B,QAAD,EAAWK,IAAX,CAAhC;AACA,eAAOD,GAAG,CAACI,MAAJ,CAAWD,MAAM,CAACE,GAAP,CAAW,UAAUC,KAAV,EAAiB;AAC5C,iBAAO,iBAAiBJ,KAAjB,GAAyB,IAAzB,GAAgCI,KAAvC;AACD,SAFiB,CAAX,CAAP;AAGD,OALM,EAKJ,EALI,CAAP;AAMD;;AACD,WAAOvC,mBAAmB,CAAC6B,QAAD,EAAWR,SAAX,CAA1B;AACD,GA/B2C,CAiC5C;;;AACA,MAAID,IAAI,YAAYd,WAAW,CAACkC,sBAAhC,EAAwD;AACtD,QAAInB,SAAS,CAACE,IAAV,KAAmBnB,IAAI,CAACqC,MAA5B,EAAoC;AAClC,aAAO,CAAC,eAAerB,IAAI,CAACsB,IAApB,GAA2B,yBAA5B,CAAP;AACD;;AACD,QAAIC,MAAM,GAAGvB,IAAI,CAACwB,SAAL,EAAb;AAEA,QAAIR,MAAM,GAAG,EAAb,CANsD,CAQtD;;AACA,QAAIS,UAAU,GAAGxB,SAAS,CAACsB,MAA3B;AACAE,IAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUC,iBAAV,EAA6B;AAC9C,UAAI,CAACJ,MAAM,CAACI,iBAAiB,CAACL,IAAlB,CAAuB3C,KAAxB,CAAX,EAA2C;AACzCqC,QAAAA,MAAM,CAACY,IAAP,CAAY,eAAeD,iBAAiB,CAACL,IAAlB,CAAuB3C,KAAtC,GAA8C,mBAA1D;AACD;AACF,KAJD,EAVsD,CAgBtD;;AACA,QAAIkD,YAAY,GAAG,CAAC,GAAGtC,QAAQ,CAACG,OAAb,EAAsB+B,UAAtB,EAAkC,UAAUK,SAAV,EAAqB;AACxE,aAAOA,SAAS,CAACR,IAAV,CAAe3C,KAAtB;AACD,KAFkB,CAAnB;AAGAH,IAAAA,MAAM,CAACuD,IAAP,CAAYR,MAAZ,EAAoBG,OAApB,CAA4B,UAAUM,SAAV,EAAqB;AAC/C,UAAIC,MAAM,GAAGrD,mBAAmB,CAAC2C,MAAM,CAACS,SAAD,CAAN,CAAkBhC,IAAnB,EAAyB6B,YAAY,CAACG,SAAD,CAAZ,IAA2BH,YAAY,CAACG,SAAD,CAAZ,CAAwBrD,KAA5E,CAAhC;AACAqC,MAAAA,MAAM,CAACY,IAAP,CAAYM,KAAZ,CAAkBlB,MAAlB,EAA0BiB,MAAM,CAACf,GAAP,CAAW,UAAUC,KAAV,EAAiB;AACpD,eAAO,eAAea,SAAf,GAA2B,KAA3B,GAAmCb,KAA1C;AACD,OAFyB,CAA1B;AAGD,KALD;AAOA,WAAOH,MAAP;AACD;;AAED,IAAEhB,IAAI,YAAYd,WAAW,CAACiD,iBAA5B,IAAiDnC,IAAI,YAAYd,WAAW,CAACkD,eAA/E,IAAkG,CAAC,GAAGhD,WAAW,CAACM,OAAhB,EAAyB,CAAzB,EAA4B,oBAA5B,CAAlG,GAAsJ,KAAK,CAA3J,CAhE4C,CAkE5C;;AACA,MAAI,CAACM,IAAI,CAACqC,cAAL,CAAoBpC,SAApB,CAAL,EAAqC;AACnC,WAAO,CAAC,oBAAoBD,IAAI,CAACsB,IAAzB,GAAgC,WAAhC,GAA8C,CAAC,GAAGzC,QAAQ,CAACyD,KAAb,EAAoBrC,SAApB,CAA9C,GAA+E,GAAhF,CAAP;AACD;;AAED,SAAO,EAAP;AACD;AAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidLiteralValue = isValidLiteralValue;\n\nvar _printer = require('../language/printer');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Utility for validators which determines if a value literal node is valid\n * given an input type.\n *\n * Note that this only validates literal values, variables are assumed to\n * provide values of the correct type.\n */\nfunction isValidLiteralValue(type, valueNode) {\n  // A value must be provided if the type is non-null.\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (!valueNode || valueNode.kind === Kind.NULL) {\n      return ['Expected \"' + String(type) + '\", found null.'];\n    }\n    return isValidLiteralValue(type.ofType, valueNode);\n  }\n\n  if (!valueNode || valueNode.kind === Kind.NULL) {\n    return [];\n  }\n\n  // This function only tests literals, and assumes variables will provide\n  // values of the correct type.\n  if (valueNode.kind === Kind.VARIABLE) {\n    return [];\n  }\n\n  // Lists accept a non-list value as a list of one.\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if (valueNode.kind === Kind.LIST) {\n      return valueNode.values.reduce(function (acc, item, index) {\n        var errors = isValidLiteralValue(itemType, item);\n        return acc.concat(errors.map(function (error) {\n          return 'In element #' + index + ': ' + error;\n        }));\n      }, []);\n    }\n    return isValidLiteralValue(itemType, valueNode);\n  }\n\n  // Input objects check each defined field and look for undefined fields.\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return ['Expected \"' + type.name + '\", found not an object.'];\n    }\n    var fields = type.getFields();\n\n    var errors = [];\n\n    // Ensure every provided field is defined.\n    var fieldNodes = valueNode.fields;\n    fieldNodes.forEach(function (providedFieldNode) {\n      if (!fields[providedFieldNode.name.value]) {\n        errors.push('In field \"' + providedFieldNode.name.value + '\": Unknown field.');\n      }\n    });\n\n    // Ensure every defined field is valid.\n    var fieldNodeMap = (0, _keyMap2.default)(fieldNodes, function (fieldNode) {\n      return fieldNode.name.value;\n    });\n    Object.keys(fields).forEach(function (fieldName) {\n      var result = isValidLiteralValue(fields[fieldName].type, fieldNodeMap[fieldName] && fieldNodeMap[fieldName].value);\n      errors.push.apply(errors, result.map(function (error) {\n        return 'In field \"' + fieldName + '\": ' + error;\n      }));\n    });\n\n    return errors;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n\n  // Scalars determine if a literal values is valid.\n  if (!type.isValidLiteral(valueNode)) {\n    return ['Expected type \"' + type.name + '\", found ' + (0, _printer.print)(valueNode) + '.'];\n  }\n\n  return [];\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */"]},"metadata":{},"sourceType":"script"}