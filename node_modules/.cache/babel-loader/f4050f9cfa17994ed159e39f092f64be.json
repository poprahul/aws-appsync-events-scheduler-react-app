{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nexports.astFromValue = astFromValue;\n\nvar _iterall = require('iterall');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\n\nfunction astFromValue(value, type) {\n  // Ensure flow knows that we treat function params as const.\n  var _value = value;\n\n  if (type instanceof _definition.GraphQLNonNull) {\n    var astValue = astFromValue(_value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (_value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if ((0, _isInvalid2.default)(_value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n\n    if ((0, _iterall.isCollection)(_value)) {\n      var valuesNodes = [];\n      (0, _iterall.forEach)(_value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(_value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (_value === null || (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) !== 'object') {\n      return null;\n    }\n\n    var fields = type.getFields();\n    var fieldNodes = [];\n    Object.keys(fields).forEach(function (fieldName) {\n      var fieldType = fields[fieldName].type;\n      var fieldValue = astFromValue(_value[fieldName], fieldType);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: fieldName\n          },\n          value: fieldValue\n        });\n      }\n    });\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must provide Input Type, cannot use: ' + String(type)) : void 0; // Since value is an internally represented value, it must be serialized\n  // to an externally represented value before converting into an AST.\n\n  var serialized = type.serialize(_value);\n\n  if ((0, _isNullish2.default)(serialized)) {\n    return null;\n  } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n  if (typeof serialized === 'boolean') {\n    return {\n      kind: Kind.BOOLEAN,\n      value: serialized\n    };\n  } // JavaScript numbers can be Int or Float values.\n\n\n  if (typeof serialized === 'number') {\n    var stringNum = String(serialized);\n    return /^[0-9]+$/.test(stringNum) ? {\n      kind: Kind.INT,\n      value: stringNum\n    } : {\n      kind: Kind.FLOAT,\n      value: stringNum\n    };\n  }\n\n  if (typeof serialized === 'string') {\n    // Enum types use Enum literals.\n    if (type instanceof _definition.GraphQLEnumType) {\n      return {\n        kind: Kind.ENUM,\n        value: serialized\n      };\n    } // ID types can use Int literals.\n\n\n    if (type === _scalars.GraphQLID && /^[0-9]+$/.test(serialized)) {\n      return {\n        kind: Kind.INT,\n        value: serialized\n      };\n    } // Use JSON stringify, which uses the same string encoding as GraphQL,\n    // then remove the quotes.\n\n\n    return {\n      kind: Kind.STRING,\n      value: JSON.stringify(serialized).slice(1, -1)\n    };\n  }\n\n  throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/astFromValue.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","astFromValue","_iterall","require","_invariant","_invariant2","_interopRequireDefault","_isNullish","_isNullish2","_isInvalid","_isInvalid2","_kinds","Kind","_interopRequireWildcard","_definition","_scalars","__esModule","newObj","key","hasOwnProperty","call","default","type","_value","GraphQLNonNull","astValue","ofType","kind","NULL","GraphQLList","itemType","isCollection","valuesNodes","forEach","item","itemNode","push","LIST","values","GraphQLInputObjectType","fields","getFields","fieldNodes","keys","fieldName","fieldType","fieldValue","OBJECT_FIELD","name","NAME","OBJECT","GraphQLScalarType","GraphQLEnumType","String","serialized","serialize","BOOLEAN","stringNum","test","INT","FLOAT","ENUM","GraphQLID","STRING","JSON","stringify","slice","TypeError"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.astFromValue = astFromValue;\n\nvar _iterall = require('iterall');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  // Ensure flow knows that we treat function params as const.\n  var _value = value;\n\n  if (type instanceof _definition.GraphQLNonNull) {\n    var astValue = astFromValue(_value, type.ofType);\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  }\n\n  // only explicit null, not undefined, NaN\n  if (_value === null) {\n    return { kind: Kind.NULL };\n  }\n\n  // undefined, NaN\n  if ((0, _isInvalid2.default)(_value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(_value)) {\n      var valuesNodes = [];\n      (0, _iterall.forEach)(_value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return { kind: Kind.LIST, values: valuesNodes };\n    }\n    return astFromValue(_value, itemType);\n  }\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (_value === null || (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) !== 'object') {\n      return null;\n    }\n    var fields = type.getFields();\n    var fieldNodes = [];\n    Object.keys(fields).forEach(function (fieldName) {\n      var fieldType = fields[fieldName].type;\n      var fieldValue = astFromValue(_value[fieldName], fieldType);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: { kind: Kind.NAME, value: fieldName },\n          value: fieldValue\n        });\n      }\n    });\n    return { kind: Kind.OBJECT, fields: fieldNodes };\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must provide Input Type, cannot use: ' + String(type)) : void 0;\n\n  // Since value is an internally represented value, it must be serialized\n  // to an externally represented value before converting into an AST.\n  var serialized = type.serialize(_value);\n  if ((0, _isNullish2.default)(serialized)) {\n    return null;\n  }\n\n  // Others serialize based on their corresponding JavaScript scalar types.\n  if (typeof serialized === 'boolean') {\n    return { kind: Kind.BOOLEAN, value: serialized };\n  }\n\n  // JavaScript numbers can be Int or Float values.\n  if (typeof serialized === 'number') {\n    var stringNum = String(serialized);\n    return (/^[0-9]+$/.test(stringNum) ? { kind: Kind.INT, value: stringNum } : { kind: Kind.FLOAT, value: stringNum }\n    );\n  }\n\n  if (typeof serialized === 'string') {\n    // Enum types use Enum literals.\n    if (type instanceof _definition.GraphQLEnumType) {\n      return { kind: Kind.ENUM, value: serialized };\n    }\n\n    // ID types can use Int literals.\n    if (type === _scalars.GraphQLID && /^[0-9]+$/.test(serialized)) {\n      return { kind: Kind.INT, value: serialized };\n    }\n\n    // Use JSON stringify, which uses the same string encoding as GraphQL,\n    // then remove the quotes.\n    return {\n      kind: Kind.STRING,\n      value: JSON.stringify(serialized).slice(1, -1)\n    };\n  }\n\n  throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n}"]},"metadata":{},"sourceType":"script"}