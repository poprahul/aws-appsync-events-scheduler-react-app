{"ast":null,"code":"var _jsxFileName = \"/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/src/Components/EventComments.js\";\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport moment from 'moment';\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport SubsriptionEventComments from \"../GraphQL/SubsriptionEventComments\";\nimport NewComment from \"./NewComment\";\n\nclass EventComments extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderComment = comment => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"comment\",\n        key: comment.commentId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"avatar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"icon user circular\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }\n      }, comment.content), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"metadata\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }\n      }, moment(comment.createdAt).format('LL, LT'))));\n    };\n  }\n\n  componentDidMount() {\n    this.subscription = this.props.subscribeToComments();\n  }\n\n  componentWillUnmount() {\n    this.subscription();\n  }\n\n  render() {\n    const {\n      comments: {\n        items\n      },\n      eventId\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"ui dividing header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, \"Comments\"), [].concat(items).sort((a, b) => a.createdAt.localeCompare(b.createdAt)).map(this.renderComment), /*#__PURE__*/React.createElement(NewComment, {\n      eventId: eventId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst EventCommentsWithData = graphql(QueryGetEvent, {\n  options: ({\n    eventId: id\n  }) => ({\n    fetchPolicy: 'cache-first',\n    variables: {\n      id\n    }\n  }),\n  props: props => ({\n    comments: props.data.getEvent ? props.data.getEvent.comments : {\n      items: []\n    },\n    subscribeToComments: () => props.data.subscribeToMore({\n      document: SubsriptionEventComments,\n      variables: {\n        eventId: props.ownProps.eventId\n      },\n      updateQuery: (prev, {\n        subscriptionData: {\n          data: {\n            subscribeToEventComments\n          }\n        }\n      }) => {\n        const res = { ...prev,\n          getEvent: { ...prev.getEvent,\n            comments: {\n              __typename: 'CommentConnections',\n              ...prev.getEvent.comments,\n              items: [...prev.getEvent.comments.items.filter(c => c.commentId !== subscribeToEventComments.commentId), subscribeToEventComments]\n            }\n          }\n        };\n        return res;\n      }\n    })\n  })\n})(EventComments);\nexport default EventCommentsWithData;","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/src/Components/EventComments.js"],"names":["React","Component","graphql","moment","QueryGetEvent","SubsriptionEventComments","NewComment","EventComments","renderComment","comment","commentId","content","createdAt","format","componentDidMount","subscription","props","subscribeToComments","componentWillUnmount","render","comments","items","eventId","concat","sort","a","b","localeCompare","map","EventCommentsWithData","options","id","fetchPolicy","variables","data","getEvent","subscribeToMore","document","ownProps","updateQuery","prev","subscriptionData","subscribeToEventComments","res","__typename","filter","c"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\n\nimport moment from 'moment';\n\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport SubsriptionEventComments from \"../GraphQL/SubsriptionEventComments\";\n\nimport NewComment from \"./NewComment\";\n\nclass EventComments extends Component {\n\n    subscription;\n\n    componentDidMount() {\n        this.subscription = this.props.subscribeToComments();\n    }\n\n    componentWillUnmount() {\n        this.subscription();\n    }\n\n    renderComment = (comment) => {\n        return (\n            <div className=\"comment\" key={comment.commentId}>\n                <div className=\"avatar\"><i className=\"icon user circular\"></i></div>\n                <div className=\"content\">\n                    <div className=\"text\">\n                        {comment.content}\n                    </div>\n                    <div className=\"metadata\">{moment(comment.createdAt).format('LL, LT')}</div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const { comments: { items }, eventId } = this.props;\n\n        return (\n            <div className=\"ui items\">\n                <div className=\"item\">\n                    <div className=\"ui comments\">\n                        <h4 className=\"ui dividing header\">Comments</h4>\n                        {[].concat(items).sort((a, b) => a.createdAt.localeCompare(b.createdAt)).map(this.renderComment)}\n                        <NewComment eventId={eventId} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst EventCommentsWithData = graphql(\n    QueryGetEvent,\n    {\n        options: ({ eventId: id }) => ({\n            fetchPolicy: 'cache-first',\n            variables: { id }\n        }),\n        props: props => ({\n            comments: props.data.getEvent ? props.data.getEvent.comments : { items: [] },\n            subscribeToComments: () => props.data.subscribeToMore({\n                document: SubsriptionEventComments,\n                variables: {\n                    eventId: props.ownProps.eventId,\n                },\n                updateQuery: (prev, { subscriptionData: { data: { subscribeToEventComments } } }) => {\n                    const res = {\n                        ...prev,\n                        getEvent: {\n                            ...prev.getEvent,\n                            comments: {\n                                __typename: 'CommentConnections',\n                                ...prev.getEvent.comments,\n                                items: [\n                                    ...prev.getEvent.comments.items.filter(c => c.commentId !== subscribeToEventComments.commentId),\n                                    subscribeToEventComments,\n                                ]\n                            }\n                        }\n                    };\n\n                    return res;\n                }\n            })\n        }),\n    },\n)(EventComments);\n\nexport default EventCommentsWithData;"]},"metadata":{},"sourceType":"module"}