{"ast":null,"code":"export { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The primary entry point into fulfilling a GraphQL request.\n\nexport { GraphQLSchema // Definitions\n, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective // \"Enum\" of Type Kinds\n, TypeKind // Scalars\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID // Built-in Directives defined by the Spec\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective // Constant Deprecation Reason\n, DEFAULT_DEPRECATION_REASON // Meta-field definitions.\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef // GraphQL Types for introspection.\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind // Predicates\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective // Assertions\n, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType // Un-modifiers\n, getNullableType, getNamedType // Validate GraphQL schema.\n, validateSchema, assertValidSchema } from './type'; // Parse and operate on GraphQL language source files.\n\nexport { Source, getLocation // Parse\n, parse, parseValue, parseType // Print\n, print // Visit\n, visit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK } from './language'; // Execute GraphQL queries.\n\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription'; // Validate GraphQL queries.\n\nexport { validate, ValidationContext // All validation rules in the GraphQL Specification.\n, specifiedRules // Individual validation rules.\n, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedNonNullArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesDefaultValueAllowedRule, VariablesInAllowedPositionRule } from './validation'; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, formatError, printError } from './error'; // Utilities for operating on GraphQL type schema and parsed sources.\n\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery // Deprecated: use getIntrospectionQuery\n, introspectionQuery // Gets the target Operation from a Document\n, getOperationAST // Convert a GraphQLSchema to an IntrospectionQuery\n, introspectionFromSchema // Build a GraphQLSchema from an introspection result.\n, buildClientSchema // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n, buildASTSchema // Build a GraphQLSchema from a GraphQL schema language document.\n, buildSchema // Get the description from a schema AST node.\n, getDescription // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\n, extendSchema // Sort a GraphQLSchema.\n, lexicographicSortSchema // Print a GraphQLSchema to GraphQL Schema language.\n, printSchema // Prints the built-in introspection schema in the Schema Language\n// format.\n, printIntrospectionSchema // Print a GraphQLType to GraphQL Schema language.\n, printType // Create a GraphQLType from a GraphQL language AST.\n, typeFromAST // Create a JavaScript value from a GraphQL language AST with a Type.\n, valueFromAST // Create a JavaScript value from a GraphQL language AST without a Type.\n, valueFromASTUntyped // Create a GraphQL language AST from a JavaScript value.\n, astFromValue // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n, TypeInfo // Coerces a JavaScript value to a GraphQL type, or produces errors.\n, coerceValue // @deprecated use coerceValue\n, isValidJSValue // Determine if AST values adhere to a GraphQL type.\n, isValidLiteralValue // Concatenates multiple AST together.\n, concatAST // Separates an AST into an AST per Operation.\n, separateOperations // Comparators for types\n, isEqualType, isTypeSubTypeOf, doTypesOverlap // Asserts a string is a valid GraphQL name.\n, assertValidName // Compares two GraphQLSchemas and detects breaking changes.\n, findBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType // Report all deprecated usage within a GraphQL document.\n, findDeprecatedUsages } from './utilities';","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/index.js"],"names":["graphql","graphqlSync","GraphQLSchema","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","GraphQLDirective","TypeKind","specifiedScalarTypes","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLBoolean","GraphQLID","specifiedDirectives","GraphQLIncludeDirective","GraphQLSkipDirective","GraphQLDeprecatedDirective","DEFAULT_DEPRECATION_REASON","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","introspectionTypes","__Schema","__Directive","__DirectiveLocation","__Type","__Field","__InputValue","__EnumValue","__TypeKind","isSchema","isDirective","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isInputType","isOutputType","isLeafType","isCompositeType","isAbstractType","isWrappingType","isNullableType","isNamedType","isSpecifiedScalarType","isIntrospectionType","isSpecifiedDirective","assertType","assertScalarType","assertObjectType","assertInterfaceType","assertUnionType","assertEnumType","assertInputObjectType","assertListType","assertNonNullType","assertInputType","assertOutputType","assertLeafType","assertCompositeType","assertAbstractType","assertWrappingType","assertNullableType","assertNamedType","getNullableType","getNamedType","validateSchema","assertValidSchema","Source","getLocation","parse","parseValue","parseType","print","visit","visitInParallel","visitWithTypeInfo","getVisitFn","Kind","TokenKind","DirectiveLocation","BREAK","execute","defaultFieldResolver","responsePathAsArray","getDirectiveValues","subscribe","createSourceEventStream","validate","ValidationContext","specifiedRules","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedNonNullArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesDefaultValueAllowedRule","VariablesInAllowedPositionRule","GraphQLError","formatError","printError","getIntrospectionQuery","introspectionQuery","getOperationAST","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","getDescription","extendSchema","lexicographicSortSchema","printSchema","printIntrospectionSchema","printType","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","coerceValue","isValidJSValue","isValidLiteralValue","concatAST","separateOperations","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","findBreakingChanges","findDangerousChanges","BreakingChangeType","DangerousChangeType","findDeprecatedUsages"],"mappings":"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","sourcesContent":["\nexport { graphql, graphqlSync } from './graphql';\n\n// Create and operate on GraphQL type definitions and schema.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n\n// The primary entry point into fulfilling a GraphQL request.\nexport { GraphQLSchema,\n// Definitions\nGraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective,\n// \"Enum\" of Type Kinds\nTypeKind,\n// Scalars\nspecifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID,\n// Built-in Directives defined by the Spec\nspecifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective,\n// Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON,\n// Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef,\n// GraphQL Types for introspection.\nintrospectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind,\n// Predicates\nisSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective,\n// Assertions\nassertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType,\n// Un-modifiers\ngetNullableType, getNamedType,\n// Validate GraphQL schema.\nvalidateSchema, assertValidSchema } from './type';\n\n// Parse and operate on GraphQL language source files.\nexport { Source, getLocation,\n// Parse\nparse, parseValue, parseType,\n// Print\nprint,\n// Visit\nvisit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK } from './language';\n\n// Execute GraphQL queries.\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\n\nexport { subscribe, createSourceEventStream } from './subscription';\n\n// Validate GraphQL queries.\nexport { validate, ValidationContext,\n// All validation rules in the GraphQL Specification.\nspecifiedRules,\n// Individual validation rules.\nFieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedNonNullArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesDefaultValueAllowedRule, VariablesInAllowedPositionRule } from './validation';\n\n// Create, format, and print GraphQL errors.\nexport { GraphQLError, formatError, printError } from './error';\n\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery,\n// Deprecated: use getIntrospectionQuery\nintrospectionQuery,\n// Gets the target Operation from a Document\ngetOperationAST,\n// Convert a GraphQLSchema to an IntrospectionQuery\nintrospectionFromSchema,\n// Build a GraphQLSchema from an introspection result.\nbuildClientSchema,\n// Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nbuildASTSchema,\n// Build a GraphQLSchema from a GraphQL schema language document.\nbuildSchema,\n// Get the description from a schema AST node.\ngetDescription,\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\nextendSchema,\n// Sort a GraphQLSchema.\nlexicographicSortSchema,\n// Print a GraphQLSchema to GraphQL Schema language.\nprintSchema,\n// Prints the built-in introspection schema in the Schema Language\n// format.\nprintIntrospectionSchema,\n// Print a GraphQLType to GraphQL Schema language.\nprintType,\n// Create a GraphQLType from a GraphQL language AST.\ntypeFromAST,\n// Create a JavaScript value from a GraphQL language AST with a Type.\nvalueFromAST,\n// Create a JavaScript value from a GraphQL language AST without a Type.\nvalueFromASTUntyped,\n// Create a GraphQL language AST from a JavaScript value.\nastFromValue,\n// A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nTypeInfo,\n// Coerces a JavaScript value to a GraphQL type, or produces errors.\ncoerceValue,\n// @deprecated use coerceValue\nisValidJSValue,\n// Determine if AST values adhere to a GraphQL type.\nisValidLiteralValue,\n// Concatenates multiple AST together.\nconcatAST,\n// Separates an AST into an AST per Operation.\nseparateOperations,\n// Comparators for types\nisEqualType, isTypeSubTypeOf, doTypesOverlap,\n// Asserts a string is a valid GraphQL name.\nassertValidName,\n// Compares two GraphQLSchemas and detects breaking changes.\nfindBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType,\n// Report all deprecated usage within a GraphQL document.\nfindDeprecatedUsages } from './utilities';"]},"metadata":{},"sourceType":"module"}