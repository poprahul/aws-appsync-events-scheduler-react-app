{"ast":null,"code":"var _jsxFileName = \"/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/src/Components/NewComment.js\";\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { v4 as uuid } from \"uuid\";\nimport MutationCommentOnEvent from \"../GraphQL/MutationCommentOnEvent\";\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport moment from \"moment\";\n\nclass NewComment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = NewComment.defaultState;\n\n    this.handleSubmit = async e => {\n      e.stopPropagation();\n      e.preventDefault();\n      const {\n        comment\n      } = this.state;\n      const {\n        eventId,\n        createComment\n      } = this.props;\n      this.setState({\n        loading: true\n      });\n      await createComment({ ...comment,\n        eventId,\n        createdAt: moment.utc().format()\n      });\n      this.setState(NewComment.defaultState);\n    };\n\n    this.handleChange = ({\n      target: {\n        value: content\n      }\n    }) => {\n      this.setState({\n        comment: {\n          content\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      comment,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui reply form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      value: comment.content,\n      onChange: this.handleChange,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: `ui blue labeled submit icon button ${loading ? 'loading' : ''}`,\n      disabled: loading,\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"icon edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }), \"Add Comment\"));\n  }\n\n}\n\nNewComment.defaultProps = {\n  createComment: () => null\n};\nNewComment.defaultState = {\n  comment: {\n    content: ''\n  },\n  loading: false\n};\nconst NewCommentWithData = graphql(MutationCommentOnEvent, {\n  options: props => ({\n    update: (proxy, {\n      data: {\n        commentOnEvent\n      }\n    }) => {\n      const query = QueryGetEvent;\n      const variables = {\n        id: commentOnEvent.eventId\n      };\n      const data = proxy.readQuery({\n        query,\n        variables\n      });\n      data.getEvent = { ...data.getEvent,\n        comments: { ...data.getEvent.comments,\n          items: [...data.getEvent.comments.items.filter(c => c.commentId !== commentOnEvent.commentId), commentOnEvent]\n        }\n      };\n      proxy.writeQuery({\n        query,\n        data\n      });\n    }\n  }),\n  props: props => ({\n    createComment: comment => {\n      return props.mutate({\n        variables: { ...comment\n        },\n        optimisticResponse: {\n          commentOnEvent: { ...comment,\n            __typename: 'Comment',\n            commentId: uuid()\n          }\n        }\n      });\n    }\n  })\n})(NewComment);\nexport default NewCommentWithData;","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/src/Components/NewComment.js"],"names":["React","Component","graphql","v4","uuid","MutationCommentOnEvent","QueryGetEvent","moment","NewComment","state","defaultState","handleSubmit","e","stopPropagation","preventDefault","comment","eventId","createComment","props","setState","loading","createdAt","utc","format","handleChange","target","value","content","render","defaultProps","NewCommentWithData","options","update","proxy","data","commentOnEvent","query","variables","id","readQuery","getEvent","comments","items","filter","c","commentId","writeQuery","mutate","optimisticResponse","__typename"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { v4 as uuid } from \"uuid\";\n\nimport MutationCommentOnEvent from \"../GraphQL/MutationCommentOnEvent\";\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport moment from \"moment\";\n\nclass NewComment extends Component {\n\n    static defaultProps = {\n        createComment: () => null,\n    }\n\n    static defaultState = {\n        comment: {\n            content: '',\n        },\n        loading: false,\n    };\n\n    state = NewComment.defaultState;\n\n    handleSubmit = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const { comment } = this.state;\n        const { eventId, createComment } = this.props;\n\n        this.setState({ loading: true });\n\n        await createComment({\n            ...comment,\n            eventId,\n            createdAt: moment.utc().format(),\n        });\n\n        this.setState(NewComment.defaultState);\n    }\n\n    handleChange = ({ target: { value: content } }) => {\n        this.setState({ comment: { content } });\n    }\n\n    render() {\n        const { comment, loading } = this.state;\n        return (\n            <form className=\"ui reply form\">\n                <div className=\"field\">\n                    <textarea value={comment.content} onChange={this.handleChange} disabled={loading}></textarea>\n                </div>\n                <button className={`ui blue labeled submit icon button ${loading ? 'loading' : ''}`}\n                    disabled={loading} onClick={this.handleSubmit}>\n                    <i className=\"icon edit\"></i>\n                    Add Comment\n                </button>\n            </form>\n        );\n    }\n}\n\nconst NewCommentWithData = graphql(\n    MutationCommentOnEvent,\n    {\n        options: props => ({\n            update: (proxy, { data: { commentOnEvent } }) => {\n                const query = QueryGetEvent;\n                const variables = { id: commentOnEvent.eventId };\n                const data = proxy.readQuery({ query, variables });\n\n                data.getEvent = {\n                    ...data.getEvent,\n                    comments: {\n                        ...data.getEvent.comments,\n                        items: [\n                            ...data.getEvent.comments.items.filter(c => c.commentId !== commentOnEvent.commentId),\n                            commentOnEvent,\n                        ]\n                    }\n                };\n\n                proxy.writeQuery({ query, data });\n            },\n        }),\n        props: props => ({\n            createComment: (comment) => {\n                return props.mutate({\n                    variables: { ...comment },\n                    optimisticResponse: { commentOnEvent: { ...comment, __typename: 'Comment', commentId: uuid() } },\n                });\n            }\n        })\n    }\n)(NewComment);\n\nexport default NewCommentWithData;"]},"metadata":{},"sourceType":"module"}