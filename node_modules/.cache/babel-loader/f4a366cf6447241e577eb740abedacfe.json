{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return 'Cannot spread fragment \"' + fragName + '\" within itself' + via + '.';\n}\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      if (!visitedFrags[node.name.value]) {\n        detectCycleRecursive(node);\n      }\n\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n\n      if (cycleIndex === undefined) {\n        spreadPath.push(spreadNode);\n\n        if (!visitedFrags[spreadName]) {\n          var spreadFragment = context.getFragment(spreadName);\n\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        }\n\n        spreadPath.pop();\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        context.reportError(new GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {\n          return s.name.value;\n        })), cyclePath.concat(spreadNode)));\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/NoFragmentCycles.js"],"names":["GraphQLError","cycleErrorMessage","fragName","spreadNames","via","length","join","NoFragmentCycles","context","visitedFrags","Object","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","name","value","detectCycleRecursive","fragment","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","i","spreadNode","spreadName","cycleIndex","undefined","push","spreadFragment","getFragment","pop","cyclePath","slice","reportError","map","s","concat"],"mappings":"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","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return 'Cannot spread fragment \"' + fragName + '\" within itself' + via + '.';\n}\n\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null);\n\n  // Array of AST nodes used to produce meaningful errors\n  var spreadPath = [];\n\n  // Position in the spread path\n  var spreadPathIndexByName = Object.create(null);\n\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      if (!visitedFrags[node.name.value]) {\n        detectCycleRecursive(node);\n      }\n      return false;\n    }\n  };\n\n  // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n  function detectCycleRecursive(fragment) {\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n\n      if (cycleIndex === undefined) {\n        spreadPath.push(spreadNode);\n        if (!visitedFrags[spreadName]) {\n          var spreadFragment = context.getFragment(spreadName);\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        }\n        spreadPath.pop();\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        context.reportError(new GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {\n          return s.name.value;\n        })), cyclePath.concat(spreadNode)));\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}"]},"metadata":{},"sourceType":"module"}