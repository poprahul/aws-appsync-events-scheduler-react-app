{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badValueMessage = badValueMessage;\nexports.ArgumentsOfCorrectType = ArgumentsOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _isValidLiteralValue = require('../../utilities/isValidLiteralValue');\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction badValueMessage(argName, type, value, verboseErrors) {\n  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return 'Argument \"' + argName + '\" has invalid value ' + value + '.' + message;\n}\n/**\n * Argument values of correct type\n *\n * A GraphQL document is only valid if all field argument literal values are\n * of the type expected by their position.\n */\n\n\nfunction ArgumentsOfCorrectType(context) {\n  return {\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n\n      if (argDef) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argDef.type, node.value);\n\n        if (errors && errors.length > 0) {\n          context.reportError(new _error.GraphQLError(badValueMessage(node.name.value, argDef.type, (0, _printer.print)(node.value), errors), [node.value]));\n        }\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/validation/rules/ArgumentsOfCorrectType.js"],"names":["Object","defineProperty","exports","value","badValueMessage","ArgumentsOfCorrectType","_error","require","_printer","_isValidLiteralValue","argName","type","verboseErrors","message","join","context","Argument","node","argDef","getArgument","errors","isValidLiteralValue","length","reportError","GraphQLError","name","print"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AAEA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,qCAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASH,eAAT,CAAyBM,OAAzB,EAAkCC,IAAlC,EAAwCR,KAAxC,EAA+CS,aAA/C,EAA8D;AAC5D,MAAIC,OAAO,GAAGD,aAAa,GAAG,OAAOA,aAAa,CAACE,IAAd,CAAmB,IAAnB,CAAV,GAAqC,EAAhE;AACA,SAAO,eAAeJ,OAAf,GAAyB,sBAAzB,GAAkDP,KAAlD,GAA0D,GAA1D,GAAgEU,OAAvE;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASR,sBAAT,CAAgCU,OAAhC,EAAyC;AACvC,SAAO;AACLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAChC,UAAIC,MAAM,GAAGH,OAAO,CAACI,WAAR,EAAb;;AACA,UAAID,MAAJ,EAAY;AACV,YAAIE,MAAM,GAAG,CAAC,GAAGX,oBAAoB,CAACY,mBAAzB,EAA8CH,MAAM,CAACP,IAArD,EAA2DM,IAAI,CAACd,KAAhE,CAAb;;AACA,YAAIiB,MAAM,IAAIA,MAAM,CAACE,MAAP,GAAgB,CAA9B,EAAiC;AAC/BP,UAAAA,OAAO,CAACQ,WAAR,CAAoB,IAAIjB,MAAM,CAACkB,YAAX,CAAwBpB,eAAe,CAACa,IAAI,CAACQ,IAAL,CAAUtB,KAAX,EAAkBe,MAAM,CAACP,IAAzB,EAA+B,CAAC,GAAGH,QAAQ,CAACkB,KAAb,EAAoBT,IAAI,CAACd,KAAzB,CAA/B,EAAgEiB,MAAhE,CAAvC,EAAgH,CAACH,IAAI,CAACd,KAAN,CAAhH,CAApB;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAVI,GAAP;AAYD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badValueMessage = badValueMessage;\nexports.ArgumentsOfCorrectType = ArgumentsOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _isValidLiteralValue = require('../../utilities/isValidLiteralValue');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction badValueMessage(argName, type, value, verboseErrors) {\n  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return 'Argument \"' + argName + '\" has invalid value ' + value + '.' + message;\n}\n\n/**\n * Argument values of correct type\n *\n * A GraphQL document is only valid if all field argument literal values are\n * of the type expected by their position.\n */\nfunction ArgumentsOfCorrectType(context) {\n  return {\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n      if (argDef) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argDef.type, node.value);\n        if (errors && errors.length > 0) {\n          context.reportError(new _error.GraphQLError(badValueMessage(node.name.value, argDef.type, (0, _printer.print)(node.value), errors), [node.value]));\n        }\n      }\n      return false;\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}