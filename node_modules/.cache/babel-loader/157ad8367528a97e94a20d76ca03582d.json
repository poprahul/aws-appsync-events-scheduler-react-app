{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, getNullableType, getNamedType } from '../../type/definition';\nimport isInvalid from '../../jsutils/isInvalid';\nimport keyMap from '../../jsutils/keyMap';\nimport orList from '../../jsutils/orList';\nimport suggestionList from '../../jsutils/suggestionList';\nexport function badValueMessage(typeName, valueName, message) {\n  return 'Expected type ' + typeName + ', found ' + valueName + (message ? '; ' + message : '.');\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return 'Field ' + typeName + '.' + fieldName + ' of required type ' + (fieldTypeName + ' was not provided.');\n}\nexport function unknownFieldMessage(typeName, fieldName, message) {\n  return 'Field \"' + fieldName + '\" is not defined by type ' + typeName + (message ? '; ' + message : '.');\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(String(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var inputFields = type.getFields();\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n      Object.keys(inputFields).forEach(function (fieldName) {\n        var fieldType = inputFields[fieldName].type;\n        var fieldNode = fieldNodeMap[fieldName];\n\n        if (!fieldNode && isNonNullType(fieldType)) {\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));\n        }\n      });\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? 'Did you mean ' + orList(suggestions) + '?' : undefined;\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node), enumTypeSuggestion(type, node)), node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if (isEnumType(type)) {\n    var suggestions = suggestionList(print(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n\n    if (suggestions.length !== 0) {\n      return 'Did you mean the enum value ' + orList(suggestions) + '?';\n    }\n  }\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/ValuesOfCorrectType.js"],"names":["GraphQLError","print","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","getNullableType","getNamedType","isInvalid","keyMap","orList","suggestionList","badValueMessage","typeName","valueName","message","requiredFieldMessage","fieldName","fieldTypeName","unknownFieldMessage","ValuesOfCorrectType","context","NullValue","node","type","getInputType","reportError","String","ListValue","getParentInputType","isValidScalar","ObjectValue","inputFields","getFields","fieldNodeMap","fields","field","name","value","Object","keys","forEach","fieldType","fieldNode","ObjectField","parentType","suggestions","didYouMean","length","undefined","EnumValue","getValue","enumTypeSuggestion","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","error","getValues","map"],"mappings":"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","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport { print } from '../../language/printer';\n\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, getNullableType, getNamedType } from '../../type/definition';\n\nimport isInvalid from '../../jsutils/isInvalid';\nimport keyMap from '../../jsutils/keyMap';\nimport orList from '../../jsutils/orList';\nimport suggestionList from '../../jsutils/suggestionList';\n\nexport function badValueMessage(typeName, valueName, message) {\n  return 'Expected type ' + typeName + ', found ' + valueName + (message ? '; ' + message : '.');\n}\n\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return 'Field ' + typeName + '.' + fieldName + ' of required type ' + (fieldTypeName + ' was not provided.');\n}\n\nexport function unknownFieldMessage(typeName, fieldName, message) {\n  return 'Field \"' + fieldName + '\" is not defined by type ' + typeName + (message ? '; ' + message : '.');\n}\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(String(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n      // Ensure every required field exists.\n      var inputFields = type.getFields();\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n      Object.keys(inputFields).forEach(function (fieldName) {\n        var fieldType = inputFields[fieldName].type;\n        var fieldNode = fieldNodeMap[fieldName];\n        if (!fieldNode && isNonNullType(fieldType)) {\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));\n        }\n      });\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? 'Did you mean ' + orList(suggestions) + '?' : undefined;\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node), enumTypeSuggestion(type, node)), node));\n    return;\n  }\n\n  // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n  try {\n    var parseResult = type.parseLiteral(node, undefined /* variables */);\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if (isEnumType(type)) {\n    var suggestions = suggestionList(print(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n    if (suggestions.length !== 0) {\n      return 'Did you mean the enum value ' + orList(suggestions) + '?';\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}