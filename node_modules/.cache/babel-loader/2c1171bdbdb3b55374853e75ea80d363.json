{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;\n\nvar _definition = require('./definition');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n} // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n\n  var num = Number(value);\n\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n\n  var int = Math.floor(num);\n\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n\n  return int;\n}\n\nvar GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return null;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n\n  var num = Number(value);\n\n  if (num === num) {\n    return num;\n  }\n\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nvar GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : null;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n\n  return String(value);\n}\n\nvar GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : null;\n  }\n});\nvar GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : null;\n  }\n});\nvar GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : null;\n  }\n});","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/type/scalars.js"],"names":["Object","defineProperty","exports","value","GraphQLID","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","undefined","_definition","require","_kinds","Kind","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","MAX_INT","MIN_INT","coerceInt","TypeError","num","Number","String","int","Math","floor","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","ast","kind","INT","parseInt","coerceFloat","FLOAT","parseFloat","coerceString","Array","isArray","STRING","Boolean","BOOLEAN"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;\n\nvar _definition = require('./definition');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n  var num = Number(value);\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n  var int = Math.floor(num);\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n  return int;\n}\n\nvar GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n    return null;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n  var num = Number(value);\n  if (num === num) {\n    return num;\n  }\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nvar GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : null;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n  return String(value);\n}\n\nvar GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : null;\n  }\n});\n\nvar GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : null;\n  }\n});\n\nvar GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : null;\n  }\n});"]},"metadata":{},"sourceType":"script"}