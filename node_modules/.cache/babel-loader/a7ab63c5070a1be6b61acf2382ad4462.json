{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? 'Variable \"$' + varName + '\" is never used in operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is never used.';\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        usages.forEach(function (_ref) {\n          var node = _ref.node;\n          variableNameUsed[node.name.value] = true;\n        });\n        variableDefs.forEach(function (variableDef) {\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/NoUnusedVariables.js"],"names":["GraphQLError","unusedVariableMessage","varName","opName","NoUnusedVariables","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","name","value","forEach","_ref","node","variableDef","variableName","variable","reportError","VariableDefinition","def","push"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,MAAxC,EAAgD;AACrD,SAAOA,MAAM,GAAG,gBAAgBD,OAAhB,GAA0B,gCAA1B,GAA6DC,MAA7D,GAAsE,IAAzE,GAAgF,gBAAgBD,OAAhB,GAA0B,kBAAvH;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,MAAIC,YAAY,GAAG,EAAnB;AAEA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBF,QAAAA,YAAY,GAAG,EAAf;AACD,OAHkB;AAInBG,MAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,SAAf,EAA0B;AAC/B,YAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;AACA,YAAIC,MAAM,GAAGT,OAAO,CAACU,0BAAR,CAAmCL,SAAnC,CAAb;AACA,YAAIP,MAAM,GAAGO,SAAS,CAACM,IAAV,GAAiBN,SAAS,CAACM,IAAV,CAAeC,KAAhC,GAAwC,IAArD;AAEAH,QAAAA,MAAM,CAACI,OAAP,CAAe,UAAUC,IAAV,EAAgB;AAC7B,cAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAEAT,UAAAA,gBAAgB,CAACS,IAAI,CAACJ,IAAL,CAAUC,KAAX,CAAhB,GAAoC,IAApC;AACD,SAJD;AAMAX,QAAAA,YAAY,CAACY,OAAb,CAAqB,UAAUG,WAAV,EAAuB;AAC1C,cAAIC,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBP,IAArB,CAA0BC,KAA7C;;AACA,cAAIN,gBAAgB,CAACW,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3CjB,YAAAA,OAAO,CAACmB,WAAR,CAAoB,IAAIxB,YAAJ,CAAiBC,qBAAqB,CAACqB,YAAD,EAAenB,MAAf,CAAtC,EAA8D,CAACkB,WAAD,CAA9D,CAApB;AACD;AACF,SALD;AAMD;AArBkB,KADhB;AAwBLI,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AACnDpB,MAAAA,YAAY,CAACqB,IAAb,CAAkBD,GAAlB;AACD;AA1BI,GAAP;AA4BD","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? 'Variable \"$' + varName + '\" is never used in operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is never used.';\n}\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node;\n\n          variableNameUsed[node.name.value] = true;\n        });\n\n        variableDefs.forEach(function (variableDef) {\n          var variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}