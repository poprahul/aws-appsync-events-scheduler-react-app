{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.valueFromAST = valueFromAST;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {\n      // No valid return value.\n      return;\n    } // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n\n\n    return variables[variableName];\n  }\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (itemType instanceof _definition.GraphQLNonNull) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n\n          if ((0, _isInvalid2.default)(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fields = type.getFields();\n    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fieldNames = Object.keys(fields);\n\n    for (var _i = 0; _i < fieldNames.length; _i++) {\n      var fieldName = fieldNames[_i];\n      var field = fields[fieldName];\n      var fieldNode = fieldNodes[fieldName];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[fieldName] = field.defaultValue;\n        } else if (field.type instanceof _definition.GraphQLNonNull) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[fieldName] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n  var parsed = type.parseLiteral(valueNode);\n\n  if ((0, _isNullish2.default)(parsed) && !type.isValidLiteral(valueNode)) {\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    return;\n  }\n\n  return parsed;\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/valueFromAST.js"],"names":["Object","defineProperty","exports","value","valueFromAST","_keyMap","require","_keyMap2","_interopRequireDefault","_invariant","_invariant2","_isNullish","_isNullish2","_isInvalid","_isInvalid2","_kinds","Kind","_interopRequireWildcard","_definition","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","valueNode","type","variables","GraphQLNonNull","kind","NULL","ofType","VARIABLE","variableName","name","GraphQLList","itemType","LIST","coercedValues","itemNodes","values","i","length","isMissingVariable","push","itemValue","coercedValue","GraphQLInputObjectType","OBJECT","coercedObj","create","fields","getFields","fieldNodes","field","fieldNames","keys","_i","fieldName","fieldNode","defaultValue","fieldValue","GraphQLScalarType","GraphQLEnumType","parsed","parseLiteral","isValidLiteral"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AAEA,IAAII,UAAU,GAAGH,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,IAAIE,UAAU,GAAGL,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAIM,WAAW,GAAGJ,sBAAsB,CAACG,UAAD,CAAxC;;AAEA,IAAIE,UAAU,GAAGP,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAIQ,WAAW,GAAGN,sBAAsB,CAACK,UAAD,CAAxC;;AAEA,IAAIE,MAAM,GAAGT,OAAO,CAAC,mBAAD,CAApB;;AAEA,IAAIU,IAAI,GAAGC,uBAAuB,CAACF,MAAD,CAAlC;;AAEA,IAAIG,WAAW,GAAGZ,OAAO,CAAC,oBAAD,CAAzB;;AAEA,SAASW,uBAAT,CAAiCE,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIE,MAAM,GAAG,EAAb;;AAAiB,QAAIF,GAAG,IAAI,IAAX,EAAiB;AAAE,WAAK,IAAIG,GAAT,IAAgBH,GAAhB,EAAqB;AAAE,YAAInB,MAAM,CAACuB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CG,GAA1C,CAAJ,EAAoDD,MAAM,CAACC,GAAD,CAAN,GAAcH,GAAG,CAACG,GAAD,CAAjB;AAAyB;AAAE;;AAACD,IAAAA,MAAM,CAACK,OAAP,GAAiBP,GAAjB;AAAsB,WAAOE,MAAP;AAAgB;AAAE;;AAE7Q,SAASb,sBAAT,CAAgCW,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEO,IAAAA,OAAO,EAAEP;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASf,YAAT,CAAsBuB,SAAtB,EAAiCC,IAAjC,EAAuCC,SAAvC,EAAkD;AAChD,MAAI,CAACF,SAAL,EAAgB;AACd;AACA;AACA;AACD;;AAED,MAAIC,IAAI,YAAYV,WAAW,CAACY,cAAhC,EAAgD;AAC9C,QAAIH,SAAS,CAACI,IAAV,KAAmBf,IAAI,CAACgB,IAA5B,EAAkC;AAChC,aADgC,CACxB;AACT;;AACD,WAAO5B,YAAY,CAACuB,SAAD,EAAYC,IAAI,CAACK,MAAjB,EAAyBJ,SAAzB,CAAnB;AACD;;AAED,MAAIF,SAAS,CAACI,IAAV,KAAmBf,IAAI,CAACgB,IAA5B,EAAkC;AAChC;AACA,WAAO,IAAP;AACD;;AAED,MAAIL,SAAS,CAACI,IAAV,KAAmBf,IAAI,CAACkB,QAA5B,EAAsC;AACpC,QAAIC,YAAY,GAAGR,SAAS,CAACS,IAAV,CAAejC,KAAlC;;AACA,QAAI,CAAC0B,SAAD,IAAc,CAAC,GAAGf,WAAW,CAACY,OAAhB,EAAyBG,SAAS,CAACM,YAAD,CAAlC,CAAlB,EAAqE;AACnE;AACA;AACD,KALmC,CAMpC;AACA;AACA;;;AACA,WAAON,SAAS,CAACM,YAAD,CAAhB;AACD;;AAED,MAAIP,IAAI,YAAYV,WAAW,CAACmB,WAAhC,EAA6C;AAC3C,QAAIC,QAAQ,GAAGV,IAAI,CAACK,MAApB;;AACA,QAAIN,SAAS,CAACI,IAAV,KAAmBf,IAAI,CAACuB,IAA5B,EAAkC;AAChC,UAAIC,aAAa,GAAG,EAApB;AACA,UAAIC,SAAS,GAAGd,SAAS,CAACe,MAA1B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,iBAAiB,CAACJ,SAAS,CAACE,CAAD,CAAV,EAAed,SAAf,CAArB,EAAgD;AAC9C;AACA;AACA,cAAIS,QAAQ,YAAYpB,WAAW,CAACY,cAApC,EAAoD;AAClD,mBADkD,CAC1C;AACT;;AACDU,UAAAA,aAAa,CAACM,IAAd,CAAmB,IAAnB;AACD,SAPD,MAOO;AACL,cAAIC,SAAS,GAAG3C,YAAY,CAACqC,SAAS,CAACE,CAAD,CAAV,EAAeL,QAAf,EAAyBT,SAAzB,CAA5B;;AACA,cAAI,CAAC,GAAGf,WAAW,CAACY,OAAhB,EAAyBqB,SAAzB,CAAJ,EAAyC;AACvC,mBADuC,CAC/B;AACT;;AACDP,UAAAA,aAAa,CAACM,IAAd,CAAmBC,SAAnB;AACD;AACF;;AACD,aAAOP,aAAP;AACD;;AACD,QAAIQ,YAAY,GAAG5C,YAAY,CAACuB,SAAD,EAAYW,QAAZ,EAAsBT,SAAtB,CAA/B;;AACA,QAAI,CAAC,GAAGf,WAAW,CAACY,OAAhB,EAAyBsB,YAAzB,CAAJ,EAA4C;AAC1C,aAD0C,CAClC;AACT;;AACD,WAAO,CAACA,YAAD,CAAP;AACD;;AAED,MAAIpB,IAAI,YAAYV,WAAW,CAAC+B,sBAAhC,EAAwD;AACtD,QAAItB,SAAS,CAACI,IAAV,KAAmBf,IAAI,CAACkC,MAA5B,EAAoC;AAClC,aADkC,CAC1B;AACT;;AACD,QAAIC,UAAU,GAAGnD,MAAM,CAACoD,MAAP,CAAc,IAAd,CAAjB;AACA,QAAIC,MAAM,GAAGzB,IAAI,CAAC0B,SAAL,EAAb;AACA,QAAIC,UAAU,GAAG,CAAC,GAAGhD,QAAQ,CAACmB,OAAb,EAAsBC,SAAS,CAAC0B,MAAhC,EAAwC,UAAUG,KAAV,EAAiB;AACxE,aAAOA,KAAK,CAACpB,IAAN,CAAWjC,KAAlB;AACD,KAFgB,CAAjB;AAGA,QAAIsD,UAAU,GAAGzD,MAAM,CAAC0D,IAAP,CAAYL,MAAZ,CAAjB;;AACA,SAAK,IAAIM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,UAAU,CAACb,MAAjC,EAAyCe,EAAE,EAA3C,EAA+C;AAC7C,UAAIC,SAAS,GAAGH,UAAU,CAACE,EAAD,CAA1B;AACA,UAAIH,KAAK,GAAGH,MAAM,CAACO,SAAD,CAAlB;AACA,UAAIC,SAAS,GAAGN,UAAU,CAACK,SAAD,CAA1B;;AACA,UAAI,CAACC,SAAD,IAAchB,iBAAiB,CAACgB,SAAS,CAAC1D,KAAX,EAAkB0B,SAAlB,CAAnC,EAAiE;AAC/D,YAAI,CAAC,CAAC,GAAGf,WAAW,CAACY,OAAhB,EAAyB8B,KAAK,CAACM,YAA/B,CAAL,EAAmD;AACjDX,UAAAA,UAAU,CAACS,SAAD,CAAV,GAAwBJ,KAAK,CAACM,YAA9B;AACD,SAFD,MAEO,IAAIN,KAAK,CAAC5B,IAAN,YAAsBV,WAAW,CAACY,cAAtC,EAAsD;AAC3D,iBAD2D,CACnD;AACT;;AACD;AACD;;AACD,UAAIiC,UAAU,GAAG3D,YAAY,CAACyD,SAAS,CAAC1D,KAAX,EAAkBqD,KAAK,CAAC5B,IAAxB,EAA8BC,SAA9B,CAA7B;;AACA,UAAI,CAAC,GAAGf,WAAW,CAACY,OAAhB,EAAyBqC,UAAzB,CAAJ,EAA0C;AACxC,eADwC,CAChC;AACT;;AACDZ,MAAAA,UAAU,CAACS,SAAD,CAAV,GAAwBG,UAAxB;AACD;;AACD,WAAOZ,UAAP;AACD;;AAED,IAAEvB,IAAI,YAAYV,WAAW,CAAC8C,iBAA5B,IAAiDpC,IAAI,YAAYV,WAAW,CAAC+C,eAA/E,IAAkG,CAAC,GAAGvD,WAAW,CAACgB,OAAhB,EAAyB,CAAzB,EAA4B,oBAA5B,CAAlG,GAAsJ,KAAK,CAA3J;AAEA,MAAIwC,MAAM,GAAGtC,IAAI,CAACuC,YAAL,CAAkBxC,SAAlB,CAAb;;AACA,MAAI,CAAC,GAAGf,WAAW,CAACc,OAAhB,EAAyBwC,MAAzB,KAAoC,CAACtC,IAAI,CAACwC,cAAL,CAAoBzC,SAApB,CAAzC,EAAyE;AACvE;AACA;AACA;AACD;;AAED,SAAOuC,MAAP;AACD,C,CAED;AACA;;;AACA,SAASrB,iBAAT,CAA2BlB,SAA3B,EAAsCE,SAAtC,EAAiD;AAC/C,SAAOF,SAAS,CAACI,IAAV,KAAmBf,IAAI,CAACkB,QAAxB,KAAqC,CAACL,SAAD,IAAc,CAAC,GAAGf,WAAW,CAACY,OAAhB,EAAyBG,SAAS,CAACF,SAAS,CAACS,IAAV,CAAejC,KAAhB,CAAlC,CAAnD,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.valueFromAST = valueFromAST;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n    // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n    return variables[variableName];\n  }\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (itemType instanceof _definition.GraphQLNonNull) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n          if ((0, _isInvalid2.default)(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(itemValue);\n        }\n      }\n      return coercedValues;\n    }\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return [coercedValue];\n  }\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n    var coercedObj = Object.create(null);\n    var fields = type.getFields();\n    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fieldNames = Object.keys(fields);\n    for (var _i = 0; _i < fieldNames.length; _i++) {\n      var fieldName = fieldNames[_i];\n      var field = fields[fieldName];\n      var fieldNode = fieldNodes[fieldName];\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[fieldName] = field.defaultValue;\n        } else if (field.type instanceof _definition.GraphQLNonNull) {\n          return; // Invalid: intentionally return no value.\n        }\n        continue;\n      }\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n      coercedObj[fieldName] = fieldValue;\n    }\n    return coercedObj;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n\n  var parsed = type.parseLiteral(valueNode);\n  if ((0, _isNullish2.default)(parsed) && !type.isValidLiteral(valueNode)) {\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    return;\n  }\n\n  return parsed;\n}\n\n// Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));\n}"]},"metadata":{},"sourceType":"script"}