{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unusedVariableMessage = unusedVariableMessage;\nexports.NoUnusedVariables = NoUnusedVariables;\n\nvar _error = require('../../error');\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction unusedVariableMessage(varName, opName) {\n  return opName ? 'Variable \"$' + varName + '\" is never used in operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is never used.';\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\n\nfunction NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        usages.forEach(function (_ref) {\n          var node = _ref.node;\n          variableNameUsed[node.name.value] = true;\n        });\n        variableDefs.forEach(function (variableDef) {\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/validation/rules/NoUnusedVariables.js"],"names":["Object","defineProperty","exports","value","unusedVariableMessage","NoUnusedVariables","_error","require","varName","opName","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","create","usages","getRecursiveVariableUsages","name","forEach","_ref","node","variableDef","variableName","variable","reportError","GraphQLError","VariableDefinition","def","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;AACAF,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASH,qBAAT,CAA+BI,OAA/B,EAAwCC,MAAxC,EAAgD;AAC9C,SAAOA,MAAM,GAAG,gBAAgBD,OAAhB,GAA0B,gCAA1B,GAA6DC,MAA7D,GAAsE,IAAzE,GAAgF,gBAAgBD,OAAhB,GAA0B,kBAAvH;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,iBAAT,CAA2BK,OAA3B,EAAoC;AAClC,MAAIC,YAAY,GAAG,EAAnB;AAEA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBF,QAAAA,YAAY,GAAG,EAAf;AACD,OAHkB;AAInBG,MAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,SAAf,EAA0B;AAC/B,YAAIC,gBAAgB,GAAGhB,MAAM,CAACiB,MAAP,CAAc,IAAd,CAAvB;AACA,YAAIC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCJ,SAAnC,CAAb;AACA,YAAIN,MAAM,GAAGM,SAAS,CAACK,IAAV,GAAiBL,SAAS,CAACK,IAAV,CAAejB,KAAhC,GAAwC,IAArD;AAEAe,QAAAA,MAAM,CAACG,OAAP,CAAe,UAAUC,IAAV,EAAgB;AAC7B,cAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAEAP,UAAAA,gBAAgB,CAACO,IAAI,CAACH,IAAL,CAAUjB,KAAX,CAAhB,GAAoC,IAApC;AACD,SAJD;AAMAQ,QAAAA,YAAY,CAACU,OAAb,CAAqB,UAAUG,WAAV,EAAuB;AAC1C,cAAIC,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBN,IAArB,CAA0BjB,KAA7C;;AACA,cAAIa,gBAAgB,CAACS,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3Cf,YAAAA,OAAO,CAACiB,WAAR,CAAoB,IAAIrB,MAAM,CAACsB,YAAX,CAAwBxB,qBAAqB,CAACqB,YAAD,EAAehB,MAAf,CAA7C,EAAqE,CAACe,WAAD,CAArE,CAApB;AACD;AACF,SALD;AAMD;AArBkB,KADhB;AAwBLK,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AACnDnB,MAAAA,YAAY,CAACoB,IAAb,CAAkBD,GAAlB;AACD;AA1BI,GAAP;AA4BD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unusedVariableMessage = unusedVariableMessage;\nexports.NoUnusedVariables = NoUnusedVariables;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction unusedVariableMessage(varName, opName) {\n  return opName ? 'Variable \"$' + varName + '\" is never used in operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is never used.';\n}\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nfunction NoUnusedVariables(context) {\n  var variableDefs = [];\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node;\n\n          variableNameUsed[node.name.value] = true;\n        });\n\n        variableDefs.forEach(function (variableDef) {\n          var variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}