{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = undefined;\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _astFromValue = require('../utilities/astFromValue');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('./definition');\n\nvar _scalars = require('./scalars');\n\nvar _directives = require('./directives');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar __Schema = exports.__Schema = new _definition.GraphQLObjectType({\n  name: '__Schema',\n  isIntrospection: true,\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          var typeMap = schema.getTypeMap();\n          return Object.keys(typeMap).map(function (key) {\n            return typeMap[key];\n          });\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: new _definition.GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\n\nvar __Directive = exports.__Directive = new _definition.GraphQLObjectType({\n  name: '__Directive',\n  isIntrospection: true,\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + '\\n\\nIn some cases, you need to provide options to alter GraphQL\\'s ' + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: {\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLString)\n      },\n      description: {\n        type: _scalars.GraphQLString\n      },\n      locations: {\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation)))\n      },\n      args: {\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      },\n      // NOTE: the following three fields are deprecated and are no longer part\n      // of the GraphQL specification.\n      onOperation: {\n        deprecationReason: 'Use `locations`.',\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directives.DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.SUBSCRIPTION) !== -1;\n        }\n      },\n      onFragment: {\n        deprecationReason: 'Use `locations`.',\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directives.DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.FRAGMENT_DEFINITION) !== -1;\n        }\n      },\n      onField: {\n        deprecationReason: 'Use `locations`.',\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directives.DirectiveLocation.FIELD) !== -1;\n        }\n      }\n    };\n  }\n});\n\nvar __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({\n  name: '__DirectiveLocation',\n  isIntrospection: true,\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: _directives.DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: _directives.DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: _directives.DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: _directives.DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: _directives.DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: _directives.DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: _directives.DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: _directives.DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: _directives.DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: _directives.DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: _directives.DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: _directives.DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: _directives.DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: _directives.DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: _directives.DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: _directives.DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: _directives.DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: _directives.DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\n\nvar __Type = exports.__Type = new _definition.GraphQLObjectType({\n  name: '__Type',\n  isIntrospection: true,\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: new _definition.GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (type instanceof _definition.GraphQLScalarType) {\n            return TypeKind.SCALAR;\n          } else if (type instanceof _definition.GraphQLObjectType) {\n            return TypeKind.OBJECT;\n          } else if (type instanceof _definition.GraphQLInterfaceType) {\n            return TypeKind.INTERFACE;\n          } else if (type instanceof _definition.GraphQLUnionType) {\n            return TypeKind.UNION;\n          } else if (type instanceof _definition.GraphQLEnumType) {\n            return TypeKind.ENUM;\n          } else if (type instanceof _definition.GraphQLInputObjectType) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (type instanceof _definition.GraphQLList) {\n            return TypeKind.LIST;\n          } else if (type instanceof _definition.GraphQLNonNull) {\n            return TypeKind.NON_NULL;\n          }\n\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: {\n        type: _scalars.GraphQLString\n      },\n      description: {\n        type: _scalars.GraphQLString\n      },\n      fields: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: _scalars.GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {\n            var fieldMap = type.getFields();\n            var fields = Object.keys(fieldMap).map(function (fieldName) {\n              return fieldMap[fieldName];\n            });\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (type instanceof _definition.GraphQLObjectType) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if ((0, _definition.isAbstractType)(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: _scalars.GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (type instanceof _definition.GraphQLEnumType) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (type instanceof _definition.GraphQLInputObjectType) {\n            var fieldMap = type.getFields();\n            return Object.keys(fieldMap).map(function (fieldName) {\n              return fieldMap[fieldName];\n            });\n          }\n        }\n      },\n      ofType: {\n        type: __Type\n      }\n    };\n  }\n});\n\nvar __Field = exports.__Field = new _definition.GraphQLObjectType({\n  name: '__Field',\n  isIntrospection: true,\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLString)\n      },\n      description: {\n        type: _scalars.GraphQLString\n      },\n      args: {\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: {\n        type: new _definition.GraphQLNonNull(__Type)\n      },\n      isDeprecated: {\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean)\n      },\n      deprecationReason: {\n        type: _scalars.GraphQLString\n      }\n    };\n  }\n});\n\nvar __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({\n  name: '__InputValue',\n  isIntrospection: true,\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLString)\n      },\n      description: {\n        type: _scalars.GraphQLString\n      },\n      type: {\n        type: new _definition.GraphQLNonNull(__Type)\n      },\n      defaultValue: {\n        type: _scalars.GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return (0, _isInvalid2.default)(inputVal.defaultValue) ? null : (0, _printer.print)((0, _astFromValue.astFromValue)(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\n\nvar __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({\n  name: '__EnumValue',\n  isIntrospection: true,\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLString)\n      },\n      description: {\n        type: _scalars.GraphQLString\n      },\n      isDeprecated: {\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean)\n      },\n      deprecationReason: {\n        type: _scalars.GraphQLString\n      }\n    };\n  }\n});\n\nvar TypeKind = exports.TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\n\nvar __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({\n  name: '__TypeKind',\n  isIntrospection: true,\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\n\nvar SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new _definition.GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\nvar TypeMetaFieldDef = exports.TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    type: new _definition.GraphQLNonNull(_scalars.GraphQLString)\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\nvar TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/type/introspection.js"],"names":["Object","defineProperty","exports","value","TypeNameMetaFieldDef","TypeMetaFieldDef","SchemaMetaFieldDef","__TypeKind","TypeKind","__EnumValue","__InputValue","__Field","__Type","__DirectiveLocation","__Directive","__Schema","undefined","_isInvalid","require","_isInvalid2","_interopRequireDefault","_astFromValue","_printer","_definition","_scalars","_directives","obj","__esModule","default","GraphQLObjectType","name","isIntrospection","description","fields","types","type","GraphQLNonNull","GraphQLList","resolve","schema","typeMap","getTypeMap","keys","map","key","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","directives","getDirectives","GraphQLString","locations","args","directive","onOperation","deprecationReason","GraphQLBoolean","d","indexOf","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","onFragment","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","onField","FIELD","GraphQLEnumType","values","SCHEMA","SCALAR","OBJECT","FIELD_DEFINITION","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","kind","GraphQLScalarType","GraphQLInterfaceType","GraphQLUnionType","GraphQLInputObjectType","LIST","NON_NULL","Error","includeDeprecated","defaultValue","_ref","fieldMap","getFields","fieldName","filter","field","interfaces","getInterfaces","possibleTypes","context","_ref2","isAbstractType","getPossibleTypes","enumValues","_ref3","getValues","inputFields","ofType","isDeprecated","inputVal","print","astFromValue","source","_ref4","_ref5","_ref6","getType","_ref7","parentType"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = undefined;\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _astFromValue = require('../utilities/astFromValue');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('./definition');\n\nvar _scalars = require('./scalars');\n\nvar _directives = require('./directives');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar __Schema = exports.__Schema = new _definition.GraphQLObjectType({\n  name: '__Schema',\n  isIntrospection: true,\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          var typeMap = schema.getTypeMap();\n          return Object.keys(typeMap).map(function (key) {\n            return typeMap[key];\n          });\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: new _definition.GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\n\nvar __Directive = exports.__Directive = new _definition.GraphQLObjectType({\n  name: '__Directive',\n  isIntrospection: true,\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + '\\n\\nIn some cases, you need to provide options to alter GraphQL\\'s ' + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      locations: {\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation)))\n      },\n      args: {\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      },\n      // NOTE: the following three fields are deprecated and are no longer part\n      // of the GraphQL specification.\n      onOperation: {\n        deprecationReason: 'Use `locations`.',\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directives.DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.SUBSCRIPTION) !== -1;\n        }\n      },\n      onFragment: {\n        deprecationReason: 'Use `locations`.',\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directives.DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.FRAGMENT_DEFINITION) !== -1;\n        }\n      },\n      onField: {\n        deprecationReason: 'Use `locations`.',\n        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n        resolve: function resolve(d) {\n          return d.locations.indexOf(_directives.DirectiveLocation.FIELD) !== -1;\n        }\n      }\n    };\n  }\n});\n\nvar __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({\n  name: '__DirectiveLocation',\n  isIntrospection: true,\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: _directives.DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: _directives.DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: _directives.DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: _directives.DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: _directives.DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: _directives.DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: _directives.DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    SCHEMA: {\n      value: _directives.DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: _directives.DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: _directives.DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: _directives.DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: _directives.DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: _directives.DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: _directives.DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: _directives.DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: _directives.DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: _directives.DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: _directives.DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\n\nvar __Type = exports.__Type = new _definition.GraphQLObjectType({\n  name: '__Type',\n  isIntrospection: true,\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: new _definition.GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (type instanceof _definition.GraphQLScalarType) {\n            return TypeKind.SCALAR;\n          } else if (type instanceof _definition.GraphQLObjectType) {\n            return TypeKind.OBJECT;\n          } else if (type instanceof _definition.GraphQLInterfaceType) {\n            return TypeKind.INTERFACE;\n          } else if (type instanceof _definition.GraphQLUnionType) {\n            return TypeKind.UNION;\n          } else if (type instanceof _definition.GraphQLEnumType) {\n            return TypeKind.ENUM;\n          } else if (type instanceof _definition.GraphQLInputObjectType) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (type instanceof _definition.GraphQLList) {\n            return TypeKind.LIST;\n          } else if (type instanceof _definition.GraphQLNonNull) {\n            return TypeKind.NON_NULL;\n          }\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: { type: _scalars.GraphQLString },\n      description: { type: _scalars.GraphQLString },\n      fields: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {\n            var fieldMap = type.getFields();\n            var fields = Object.keys(fieldMap).map(function (fieldName) {\n              return fieldMap[fieldName];\n            });\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n            return fields;\n          }\n          return null;\n        }\n      },\n      interfaces: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (type instanceof _definition.GraphQLObjectType) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if ((0, _definition.isAbstractType)(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (type instanceof _definition.GraphQLEnumType) {\n            var values = type.getValues();\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (type instanceof _definition.GraphQLInputObjectType) {\n            var fieldMap = type.getFields();\n            return Object.keys(fieldMap).map(function (fieldName) {\n              return fieldMap[fieldName];\n            });\n          }\n        }\n      },\n      ofType: { type: __Type }\n    };\n  }\n});\n\nvar __Field = exports.__Field = new _definition.GraphQLObjectType({\n  name: '__Field',\n  isIntrospection: true,\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      args: {\n        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: { type: new _definition.GraphQLNonNull(__Type) },\n      isDeprecated: { type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean) },\n      deprecationReason: {\n        type: _scalars.GraphQLString\n      }\n    };\n  }\n});\n\nvar __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({\n  name: '__InputValue',\n  isIntrospection: true,\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      type: { type: new _definition.GraphQLNonNull(__Type) },\n      defaultValue: {\n        type: _scalars.GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return (0, _isInvalid2.default)(inputVal.defaultValue) ? null : (0, _printer.print)((0, _astFromValue.astFromValue)(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\n\nvar __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({\n  name: '__EnumValue',\n  isIntrospection: true,\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },\n      description: { type: _scalars.GraphQLString },\n      isDeprecated: { type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean) },\n      deprecationReason: {\n        type: _scalars.GraphQLString\n      }\n    };\n  }\n});\n\nvar TypeKind = exports.TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\n\nvar __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({\n  name: '__TypeKind',\n  isIntrospection: true,\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'\n    }\n  }\n});\n\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nvar SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new _definition.GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\n\nvar TypeMetaFieldDef = exports.TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{ name: 'name', type: new _definition.GraphQLNonNull(_scalars.GraphQLString) }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\n\nvar TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};"]},"metadata":{},"sourceType":"script"}