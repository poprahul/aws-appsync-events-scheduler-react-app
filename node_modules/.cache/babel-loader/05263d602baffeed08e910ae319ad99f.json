{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateVariableMessage = duplicateVariableMessage;\nexports.UniqueVariableNames = UniqueVariableNames;\n\nvar _error = require('../../error');\n\nfunction duplicateVariableMessage(variableName) {\n  return 'There can be only one variable named \"' + variableName + '\".';\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new _error.GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/validation/rules/UniqueVariableNames.js"],"names":["Object","defineProperty","exports","value","duplicateVariableMessage","UniqueVariableNames","_error","require","variableName","context","knownVariableNames","create","OperationDefinition","VariableDefinition","node","variable","name","reportError","GraphQLError"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACAF,OAAO,CAACG,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,SAASH,wBAAT,CAAkCI,YAAlC,EAAgD;AAC9C,SAAO,2CAA2CA,YAA3C,GAA0D,IAAjE;AACD;AAED;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASH,mBAAT,CAA6BI,OAA7B,EAAsC;AACpC,MAAIC,kBAAkB,GAAGV,MAAM,CAACW,MAAP,CAAc,IAAd,CAAzB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClDF,MAAAA,kBAAkB,GAAGV,MAAM,CAACW,MAAP,CAAc,IAAd,CAArB;AACD,KAHI;AAILE,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpD,UAAIN,YAAY,GAAGM,IAAI,CAACC,QAAL,CAAcC,IAAd,CAAmBb,KAAtC;;AACA,UAAIO,kBAAkB,CAACF,YAAD,CAAtB,EAAsC;AACpCC,QAAAA,OAAO,CAACQ,WAAR,CAAoB,IAAIX,MAAM,CAACY,YAAX,CAAwBd,wBAAwB,CAACI,YAAD,CAAhD,EAAgE,CAACE,kBAAkB,CAACF,YAAD,CAAnB,EAAmCM,IAAI,CAACC,QAAL,CAAcC,IAAjD,CAAhE,CAApB;AACD,OAFD,MAEO;AACLN,QAAAA,kBAAkB,CAACF,YAAD,CAAlB,GAAmCM,IAAI,CAACC,QAAL,CAAcC,IAAjD;AACD;AACF;AAXI,GAAP;AAaD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateVariableMessage = duplicateVariableMessage;\nexports.UniqueVariableNames = UniqueVariableNames;\n\nvar _error = require('../../error');\n\nfunction duplicateVariableMessage(variableName) {\n  return 'There can be only one variable named \"' + variableName + '\".';\n}\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n      if (knownVariableNames[variableName]) {\n        context.reportError(new _error.GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}