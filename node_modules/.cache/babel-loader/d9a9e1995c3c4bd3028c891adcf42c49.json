{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SOF);\n  var definitions = [];\n\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, TokenKind.EOF));\n\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition = void 0;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'extend':\n        return parseTypeExtension(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, 'Expected ' + kind + ', found ' + getTokenDesc(token));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, 'Expected \"' + value + '\", found ' + getTokenDesc(token));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, 'Unexpected ' + getTokenDesc(token));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/language/parser.js"],"names":["Source","syntaxError","createLexer","TokenKind","getTokenDesc","Kind","DirectiveLocation","parse","source","options","sourceObj","TypeError","String","lexer","parseDocument","parseValue","expect","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","parseName","token","NAME","kind","loc","start","definitions","push","parseDefinition","skip","DOCUMENT","peek","parseExecutableDefinition","parseTypeSystemDefinition","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","many","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseConstValue","FRAGMENT_SPREAD","parseFragmentName","typeCondition","advance","parseNamedType","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseTypeExtension","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","end","prototype","toJSON","inspect","match","atToken","openKind","parseFn","closeKind","nodes"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { Source } from './source';\nimport { syntaxError } from '../error';\n\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\n\n\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n\n/**\n * Configuration options to control parser behavior\n */\n\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n\n/**\n * Converts a name lex token into a name parse node.\n */\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n}\n\n// Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SOF);\n  var definitions = [];\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, TokenKind.EOF));\n\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n// Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationType : one of query mutation subscription\n */\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n    case 'mutation':\n      return 'mutation';\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Variable : $ Name\n */\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * SelectionSet : { Selection+ }\n */\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\nfunction parseField(lexer) {\n  var start = lexer.token;\n\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n\n/**\n * Argument[Const] : Name : Value[?Const]\n */\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n  var typeCondition = void 0;\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment');\n  // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentName : Name but not `on`\n */\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n  return parseName(lexer);\n}\n\n// Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n      break;\n  }\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n  return directives;\n}\n\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n  return type;\n}\n\n/**\n * NamedType : Name\n */\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n      case 'extend':\n        return parseTypeExtension(lexer);\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n\n/**\n * Description : StringValue\n */\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n  if (lexer.token.value === 'implements') {\n    lexer.advance();\n    // Optional leading ampersand\n    skip(lexer, TokenKind.AMP);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) ||\n    // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n  return types;\n}\n\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n  return types;\n}\n\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n  return locations;\n}\n\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n  throw unexpected(lexer, start);\n}\n\n// Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return { start: this.start, end: this.end };\n};\n\n/**\n * Determines if the next token is of a given kind\n */\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n  if (match) {\n    lexer.advance();\n  }\n  return match;\n}\n\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n  throw syntaxError(lexer.source, token.start, 'Expected ' + kind + ', found ' + getTokenDesc(token));\n}\n\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n  throw syntaxError(lexer.source, token.start, 'Expected \"' + value + '\", found ' + getTokenDesc(token));\n}\n\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, 'Unexpected ' + getTokenDesc(token));\n}\n\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}"]},"metadata":{},"sourceType":"module"}