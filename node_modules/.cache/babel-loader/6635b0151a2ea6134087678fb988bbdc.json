{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError, locatedError } from '../error';\nimport getPromise from '../jsutils/getPromise';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLSchema } from '../type/schema';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(context)) {\n    return {\n      errors: context\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(context, context.operation, rootValue);\n  return buildResponse(context, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(context, data) {\n  var promise = getPromise(data);\n\n  if (promise) {\n    return promise.then(function (resolved) {\n      return buildResponse(context, resolved);\n    });\n  }\n\n  return context.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: context.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError('Unknown operation named \"' + operationName + '\".'));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues = void 0;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    var promise = getPromise(result);\n\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Extracts the root type of the operation from the schema.\n */\n\n\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n\n      if (!queryType) {\n        throw new GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n\n      return queryType;\n\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n\n      return mutationType;\n\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n\n      return subscriptionType;\n\n    default:\n      throw new GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    var promise = getPromise(result);\n\n    if (promise) {\n      return promise.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    results[responseName] = result;\n\n    if (getPromise(result)) {\n      containsPromise = true;\n    }\n\n    return results;\n  }, Object.create(null)); // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return finalResults;\n  } // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n\n\n  return promiseForObject(finalResults);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var context = exeContext.contextValue;\n    var result = resolveFn(source, args, context, info);\n    var promise = getPromise(result);\n    return promise ? promise.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n\n    if (promise) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n} // This is a small wrapper around completeValue which annotates errors with\n// location information.\n\n\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        return Promise.reject(locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    throw locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path));\n  }\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  var promise = getPromise(result);\n\n  if (promise) {\n    return promise.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  } // If result is an Error, throw a located error.\n\n\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && getPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n  var promise = getPromise(runtimeType);\n\n  if (promise) {\n    return promise.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\". ') + ('Either the ' + returnType.name + ' type should provide a \"resolveType\" ') + 'function or each possible types should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    var promise = getPromise(isTypeOf);\n\n    if (promise) {\n      return promise.then(function (isTypeOfResult) {\n        if (!isTypeOfResult) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields in the context of the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n      var promise = getPromise(isTypeOfResult);\n\n      if (promise) {\n        promisedIsTypeOfResults[i] = promise;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\n\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/execution/execute.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","forEach","isCollection","GraphQLError","locatedError","getPromise","invariant","isInvalid","isNullish","memoize3","promiseForObject","promiseReduce","typeFromAST","Kind","getVariableValues","getArgumentValues","getDirectiveValues","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","GraphQLSchema","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","assertValidSchema","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","arguments","length","executeImpl","schema","assertValidExecutionArguments","context","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","promise","then","resolved","responsePathAsArray","path","flattened","curr","push","key","prev","reverse","addPath","rawVariableValues","hasMultipleAssumedOperations","fragments","Object","create","i","definitions","definition","kind","OPERATION_DEFINITION","name","value","FRAGMENT_DEFINITION","coercedVariableValues","variableDefinitions","apply","coerced","defaultFieldResolver","exeContext","type","getOperationRootType","fields","collectFields","selectionSet","undefined","result","executeFieldsSerially","executeFields","error","Promise","resolve","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","finalResults","reduce","runtimeType","visitedFragmentNames","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isPossibleType","alias","source","fieldNode","fieldName","fieldDef","getFieldDef","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","returnType","args","asErrorInstance","Error","completeValueWithLocatedError","completed","completeValue","reject","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","String","itemType","completedResults","item","index","completedItem","all","serialize","serializedResult","resolveType","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","isTypeOfResult","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResults","_i","property","getFields"],"mappings":"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","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError, locatedError } from '../error';\nimport getPromise from '../jsutils/getPromise';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\n\n\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\n\nimport { GraphQLSchema } from '../type/schema';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\n\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Return early errors if execution context failed.\n  if (Array.isArray(context)) {\n    return { errors: context };\n  }\n\n  // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  var data = executeOperation(context, context.operation, rootValue);\n  return buildResponse(context, data);\n}\n\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(context, data) {\n  var promise = getPromise(data);\n  if (promise) {\n    return promise.then(function (resolved) {\n      return buildResponse(context, resolved);\n    });\n  }\n  return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };\n}\n\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\nexport function addPath(prev, key) {\n  return { prev: prev, key: key };\n}\n\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0;\n\n  // If the schema used for execution is invalid, throw an error.\n  assertValidSchema(schema);\n\n  // Variables, if provided, must be an object.\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError('Unknown operation named \"' + operationName + '\".'));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues = void 0;\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n\n  var path = undefined;\n\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    var promise = getPromise(result);\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n      if (!queryType) {\n        throw new GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n      return queryType;\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);\n  }\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    var promise = getPromise(result);\n    if (promise) {\n      return promise.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    results[responseName] = result;\n    if (getPromise(result)) {\n      containsPromise = true;\n    }\n    return results;\n  }, Object.create(null));\n\n  // If there are no promises, we can just return the object\n  if (!containsPromise) {\n    return finalResults;\n  }\n\n  // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n  return promiseForObject(finalResults);\n}\n\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        var name = getFieldEntryKey(selection);\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n        fields[name].push(selection);\n        break;\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n  return fields;\n}\n\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n\n  // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\n// Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues);\n\n    // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n    var context = exeContext.contextValue;\n\n    var result = resolveFn(source, args, context, info);\n    var promise = getPromise(result);\n    return promise ? promise.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n}\n\n// Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n}\n\n// This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n    if (promise) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n// This is a small wrapper around completeValue which annotates errors with\n// location information.\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        return Promise.reject(locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));\n      });\n    }\n    return completed;\n  } catch (error) {\n    throw locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path));\n  }\n}\n\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  var promise = getPromise(result);\n  if (promise) {\n    return promise.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  }\n\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  }\n\n  // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n    return completed;\n  }\n\n  // If result value is null-ish (null, undefined, or NaN) then return null.\n  if (isNullish(result)) {\n    return null;\n  }\n\n  // If field type is List, complete each item in the list with the inner type\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  }\n\n  // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is Object, execute and complete all sub-selections.\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Not reachable. All possible output types have been considered.\n  /* istanbul ignore next */\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;\n\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && getPromise(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n  if (isInvalid(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n  return serializedResult;\n}\n\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  var promise = getPromise(runtimeType);\n  if (promise) {\n    return promise.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\". ') + ('Either the ' + returnType.name + ' type should provide a \"resolveType\" ') + 'function or each possible types should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    var promise = getPromise(isTypeOf);\n    if (promise) {\n      return promise.then(function (isTypeOfResult) {\n        if (!isTypeOfResult) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\n/**\n * A memoized collection of relevant subfields in the context of the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nvar collectSubfields = memoize3(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  }\n\n  // Otherwise, test each possible type.\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n\n      var promise = getPromise(isTypeOfResult);\n      if (promise) {\n        promisedIsTypeOfResults[i] = promise;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n    return property;\n  }\n};\n\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}"]},"metadata":{},"sourceType":"module"}