{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport keyMap from '../../jsutils/keyMap';\nimport { isNonNullType } from '../../type/definition';\nexport function missingFieldArgMessage(fieldName, argName, type) {\n  return 'Field \"' + fieldName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');\n}\nexport function missingDirectiveArgMessage(directiveName, argName, type) {\n  return 'Directive \"@' + directiveName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');\n}\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null) field arguments\n * have been provided.\n */\n\nexport function ProvidedNonNullArguments(context) {\n  return {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(node) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        var argNodes = node.arguments || [];\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        fieldDef.args.forEach(function (argDef) {\n          var argNode = argNodeMap[argDef.name];\n\n          if (!argNode && isNonNullType(argDef.type)) {\n            context.reportError(new GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));\n          }\n        });\n      }\n    },\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(node) {\n        var directiveDef = context.getDirective();\n\n        if (!directiveDef) {\n          return false;\n        }\n\n        var argNodes = node.arguments || [];\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        directiveDef.args.forEach(function (argDef) {\n          var argNode = argNodeMap[argDef.name];\n\n          if (!argNode && isNonNullType(argDef.type)) {\n            context.reportError(new GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));\n          }\n        });\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/ProvidedNonNullArguments.js"],"names":["GraphQLError","keyMap","isNonNullType","missingFieldArgMessage","fieldName","argName","type","String","missingDirectiveArgMessage","directiveName","ProvidedNonNullArguments","context","Field","leave","node","fieldDef","getFieldDef","argNodes","arguments","argNodeMap","arg","name","value","args","forEach","argDef","argNode","reportError","Directive","directiveDef","getDirective"],"mappings":"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","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport keyMap from '../../jsutils/keyMap';\nimport { isNonNullType } from '../../type/definition';\n\n\nexport function missingFieldArgMessage(fieldName, argName, type) {\n  return 'Field \"' + fieldName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');\n}\n\nexport function missingDirectiveArgMessage(directiveName, argName, type) {\n  return 'Directive \"@' + directiveName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');\n}\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null) field arguments\n * have been provided.\n */\nexport function ProvidedNonNullArguments(context) {\n  return {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(node) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          return false;\n        }\n        var argNodes = node.arguments || [];\n\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        fieldDef.args.forEach(function (argDef) {\n          var argNode = argNodeMap[argDef.name];\n          if (!argNode && isNonNullType(argDef.type)) {\n            context.reportError(new GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));\n          }\n        });\n      }\n    },\n\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(node) {\n        var directiveDef = context.getDirective();\n        if (!directiveDef) {\n          return false;\n        }\n        var argNodes = node.arguments || [];\n\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n        directiveDef.args.forEach(function (argDef) {\n          var argNode = argNodeMap[argDef.name];\n          if (!argNode && isNonNullType(argDef.type)) {\n            context.reportError(new GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));\n          }\n        });\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}