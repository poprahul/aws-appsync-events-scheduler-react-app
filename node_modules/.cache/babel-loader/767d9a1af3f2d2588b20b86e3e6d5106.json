{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nexport function duplicateDirectiveMessage(directiveName) {\n  return 'The directive \"' + directiveName + '\" can only be used once at ' + 'this location.';\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        directives.forEach(function (directive) {\n          var directiveName = directive.name.value;\n\n          if (knownDirectives[directiveName]) {\n            context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n          } else {\n            knownDirectives[directiveName] = directive;\n          }\n        });\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/UniqueDirectivesPerLocation.js"],"names":["GraphQLError","duplicateDirectiveMessage","directiveName","UniqueDirectivesPerLocation","context","enter","node","directives","knownDirectives","Object","create","forEach","directive","name","value","reportError"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,yBAAT,CAAmCC,aAAnC,EAAkD;AACvD,SAAO,oBAAoBA,aAApB,GAAoC,6BAApC,GAAoE,gBAA3E;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;AACnD,SAAO;AACL;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B;AACA,UAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;;AACA,UAAIA,UAAJ,EAAgB;AACd,YAAIC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACAH,QAAAA,UAAU,CAACI,OAAX,CAAmB,UAAUC,SAAV,EAAqB;AACtC,cAAIV,aAAa,GAAGU,SAAS,CAACC,IAAV,CAAeC,KAAnC;;AACA,cAAIN,eAAe,CAACN,aAAD,CAAnB,EAAoC;AAClCE,YAAAA,OAAO,CAACW,WAAR,CAAoB,IAAIf,YAAJ,CAAiBC,yBAAyB,CAACC,aAAD,CAA1C,EAA2D,CAACM,eAAe,CAACN,aAAD,CAAhB,EAAiCU,SAAjC,CAA3D,CAApB;AACD,WAFD,MAEO;AACLJ,YAAAA,eAAe,CAACN,aAAD,CAAf,GAAiCU,SAAjC;AACD;AACF,SAPD;AAQD;AACF;AAlBI,GAAP;AAoBD","sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nexport function duplicateDirectiveMessage(directiveName) {\n  return 'The directive \"' + directiveName + '\" can only be used once at ' + 'this location.';\n}\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        directives.forEach(function (directive) {\n          var directiveName = directive.name.value;\n          if (knownDirectives[directiveName]) {\n            context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n          } else {\n            knownDirectives[directiveName] = directive;\n          }\n        });\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}