{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertValidName = assertValidName;\nexports.formatWarning = formatWarning;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\nvar ERROR_PREFIX_RX = /^Error: /; // Silences warnings if an environment flag is enabled\n\nvar noNameWarning = Boolean(process && process.env && process.env.GRAPHQL_NO_NAME_WARNING); // Ensures console warnings are only issued once.\n\nvar hasWarnedAboutDunder = false;\n/**\n * Upholds the spec rules about naming.\n */\n\nfunction assertValidName(name, isIntrospection) {\n  if (!name || typeof name !== 'string') {\n    throw new Error('Must be named. Unexpected name: ' + name + '.');\n  }\n\n  if (!isIntrospection && !hasWarnedAboutDunder && !noNameWarning && name.slice(0, 2) === '__') {\n    hasWarnedAboutDunder = true;\n    /* eslint-disable no-console */\n\n    if (console && console.warn) {\n      var error = new Error('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection. In a future release of graphql this will ' + 'become a hard error.');\n      console.warn(formatWarning(error));\n    }\n    /* eslint-enable no-console */\n\n  }\n\n  if (!NAME_RX.test(name)) {\n    throw new Error('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.');\n  }\n}\n/**\n * Returns a human-readable warning based an the supplied Error object,\n * including stack trace information if available.\n */\n\n\nfunction formatWarning(error) {\n  var formatted = '';\n  var errorString = String(error).replace(ERROR_PREFIX_RX, '');\n  var stack = error.stack;\n\n  if (stack) {\n    formatted = stack.replace(ERROR_PREFIX_RX, '');\n  }\n\n  if (formatted.indexOf(errorString) === -1) {\n    formatted = errorString + '\\n' + formatted;\n  }\n\n  return formatted.trim();\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/assertValidName.js"],"names":["Object","defineProperty","exports","value","assertValidName","formatWarning","NAME_RX","ERROR_PREFIX_RX","noNameWarning","Boolean","process","env","GRAPHQL_NO_NAME_WARNING","hasWarnedAboutDunder","name","isIntrospection","Error","slice","console","warn","error","test","formatted","errorString","String","replace","stack","indexOf","trim"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAG,0BAAd;AACA,IAAIC,eAAe,GAAG,UAAtB,C,CAEA;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAnB,IAA0BD,OAAO,CAACC,GAAR,CAAYC,uBAAvC,CAA3B,C,CAEA;;AACA,IAAIC,oBAAoB,GAAG,KAA3B;AAEA;AACA;AACA;;AACA,SAAST,eAAT,CAAyBU,IAAzB,EAA+BC,eAA/B,EAAgD;AAC9C,MAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,UAAM,IAAIE,KAAJ,CAAU,qCAAqCF,IAArC,GAA4C,GAAtD,CAAN;AACD;;AACD,MAAI,CAACC,eAAD,IAAoB,CAACF,oBAArB,IAA6C,CAACL,aAA9C,IAA+DM,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,IAAxF,EAA8F;AAC5FJ,IAAAA,oBAAoB,GAAG,IAAvB;AACA;;AACA,QAAIK,OAAO,IAAIA,OAAO,CAACC,IAAvB,EAA6B;AAC3B,UAAIC,KAAK,GAAG,IAAIJ,KAAJ,CAAU,WAAWF,IAAX,GAAkB,mDAAlB,GAAwE,kEAAxE,GAA6I,sBAAvJ,CAAZ;AACAI,MAAAA,OAAO,CAACC,IAAR,CAAad,aAAa,CAACe,KAAD,CAA1B;AACD;AACD;;AACD;;AACD,MAAI,CAACd,OAAO,CAACe,IAAR,CAAaP,IAAb,CAAL,EAAyB;AACvB,UAAM,IAAIE,KAAJ,CAAU,sDAAsDF,IAAtD,GAA6D,aAAvE,CAAN;AACD;AACF;AAED;AACA;AACA;AACA;;;AACA,SAAST,aAAT,CAAuBe,KAAvB,EAA8B;AAC5B,MAAIE,SAAS,GAAG,EAAhB;AACA,MAAIC,WAAW,GAAGC,MAAM,CAACJ,KAAD,CAAN,CAAcK,OAAd,CAAsBlB,eAAtB,EAAuC,EAAvC,CAAlB;AACA,MAAImB,KAAK,GAAGN,KAAK,CAACM,KAAlB;;AACA,MAAIA,KAAJ,EAAW;AACTJ,IAAAA,SAAS,GAAGI,KAAK,CAACD,OAAN,CAAclB,eAAd,EAA+B,EAA/B,CAAZ;AACD;;AACD,MAAIe,SAAS,CAACK,OAAV,CAAkBJ,WAAlB,MAAmC,CAAC,CAAxC,EAA2C;AACzCD,IAAAA,SAAS,GAAGC,WAAW,GAAG,IAAd,GAAqBD,SAAjC;AACD;;AACD,SAAOA,SAAS,CAACM,IAAV,EAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertValidName = assertValidName;\nexports.formatWarning = formatWarning;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\nvar ERROR_PREFIX_RX = /^Error: /;\n\n// Silences warnings if an environment flag is enabled\nvar noNameWarning = Boolean(process && process.env && process.env.GRAPHQL_NO_NAME_WARNING);\n\n// Ensures console warnings are only issued once.\nvar hasWarnedAboutDunder = false;\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertValidName(name, isIntrospection) {\n  if (!name || typeof name !== 'string') {\n    throw new Error('Must be named. Unexpected name: ' + name + '.');\n  }\n  if (!isIntrospection && !hasWarnedAboutDunder && !noNameWarning && name.slice(0, 2) === '__') {\n    hasWarnedAboutDunder = true;\n    /* eslint-disable no-console */\n    if (console && console.warn) {\n      var error = new Error('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection. In a future release of graphql this will ' + 'become a hard error.');\n      console.warn(formatWarning(error));\n    }\n    /* eslint-enable no-console */\n  }\n  if (!NAME_RX.test(name)) {\n    throw new Error('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.');\n  }\n}\n\n/**\n * Returns a human-readable warning based an the supplied Error object,\n * including stack trace information if available.\n */\nfunction formatWarning(error) {\n  var formatted = '';\n  var errorString = String(error).replace(ERROR_PREFIX_RX, '');\n  var stack = error.stack;\n  if (stack) {\n    formatted = stack.replace(ERROR_PREFIX_RX, '');\n  }\n  if (formatted.indexOf(errorString) === -1) {\n    formatted = errorString + '\\n' + formatted;\n  }\n  return formatted.trim();\n}"]},"metadata":{},"sourceType":"script"}