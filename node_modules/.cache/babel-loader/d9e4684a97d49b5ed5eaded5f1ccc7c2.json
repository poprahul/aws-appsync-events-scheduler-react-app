{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { visit } from './visitor';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue;\n    return variable + ': ' + type + wrap(' = ', defaultValue);\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  ScalarTypeExtension: function ScalarTypeExtension(_ref31) {\n    var name = _ref31.name,\n        directives = _ref31.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref32) {\n    var name = _ref32.name,\n        interfaces = _ref32.interfaces,\n        directives = _ref32.directives,\n        fields = _ref32.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives,\n        fields = _ref33.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref34) {\n    var name = _ref34.name,\n        directives = _ref34.directives,\n        types = _ref34.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        values = _ref35.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        fields = _ref36.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  },\n  DirectiveDefinition: addDescription(function (_ref37) {\n    var name = _ref37.name,\n        args = _ref37.arguments,\n        locations = _ref37.locations;\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n  })\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? '\"\"\"' + escaped.replace(/\"$/, '\"\\n') + '\"\"\"' : '\"\"\"\\n' + (isDescription ? escaped : indent(escaped)) + '\\n\"\"\"';\n}","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/language/printer.js"],"names":["visit","print","ast","leave","printDocASTReducer","Name","node","value","Variable","name","Document","join","definitions","OperationDefinition","op","operation","varDefs","wrap","variableDefinitions","directives","selectionSet","VariableDefinition","_ref","variable","type","defaultValue","SelectionSet","_ref2","selections","block","Field","_ref3","alias","args","arguments","Argument","_ref4","FragmentSpread","_ref5","InlineFragment","_ref6","typeCondition","FragmentDefinition","_ref7","IntValue","_ref8","FloatValue","_ref9","StringValue","_ref10","key","isBlockString","printBlockString","JSON","stringify","BooleanValue","_ref11","NullValue","EnumValue","_ref12","ListValue","_ref13","values","ObjectValue","_ref14","fields","ObjectField","_ref15","Directive","_ref16","NamedType","_ref17","ListType","_ref18","NonNullType","_ref19","SchemaDefinition","_ref20","operationTypes","OperationTypeDefinition","_ref21","ScalarTypeDefinition","addDescription","_ref22","ObjectTypeDefinition","_ref23","interfaces","FieldDefinition","_ref24","InputValueDefinition","_ref25","InterfaceTypeDefinition","_ref26","UnionTypeDefinition","_ref27","types","length","EnumTypeDefinition","_ref28","EnumValueDefinition","_ref29","InputObjectTypeDefinition","_ref30","ScalarTypeExtension","_ref31","ObjectTypeExtension","_ref32","InterfaceTypeExtension","_ref33","UnionTypeExtension","_ref34","EnumTypeExtension","_ref35","InputObjectTypeExtension","_ref36","DirectiveDefinition","_ref37","locations","cb","description","maybeArray","separator","filter","x","array","indent","start","maybeString","end","replace","isDescription","escaped","indexOf"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { visit } from './visitor';\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nexport function print(ast) {\n  return visit(ast, { leave: printDocASTReducer });\n}\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n\n  // Document\n\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet;\n    // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n\n\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue;\n    return variable + ': ' + type + wrap(' = ', defaultValue);\n  },\n\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n\n  // Fragments\n\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (\n      // Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n\n  // Value\n\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n\n  // Directive\n\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n\n  // Type\n\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n\n  // Type System Definitions\n\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n\n  ScalarTypeExtension: function ScalarTypeExtension(_ref31) {\n    var name = _ref31.name,\n        directives = _ref31.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n\n  ObjectTypeExtension: function ObjectTypeExtension(_ref32) {\n    var name = _ref32.name,\n        interfaces = _ref32.interfaces,\n        directives = _ref32.directives,\n        fields = _ref32.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives,\n        fields = _ref33.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  UnionTypeExtension: function UnionTypeExtension(_ref34) {\n    var name = _ref34.name,\n        directives = _ref34.directives,\n        types = _ref34.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n\n  EnumTypeExtension: function EnumTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        values = _ref35.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        fields = _ref36.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  DirectiveDefinition: addDescription(function (_ref37) {\n    var name = _ref37.name,\n        args = _ref37.arguments,\n        locations = _ref37.locations;\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n  })\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? '\"\"\"' + escaped.replace(/\"$/, '\"\\n') + '\"\"\"' : '\"\"\"\\n' + (isDescription ? escaped : indent(escaped)) + '\\n\"\"\"';\n}"]},"metadata":{},"sourceType":"module"}