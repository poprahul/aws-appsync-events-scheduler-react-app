{"ast":null,"code":"var _jsxFileName = \"/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/src/Components/NewEvent.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport { graphql } from \"react-apollo\";\nimport QueryAllEvents from \"../GraphQL/QueryAllEvents\";\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport MutationCreateEvent from \"../GraphQL/MutationCreateEvent\";\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport { nearest15min } from \"../Utils\";\nimport DateTimePickerCustomInput from \"./DateTimePickerCustomInput\";\n\nclass NewEvent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      event: {\n        name: '',\n        when: nearest15min().format(),\n        where: '',\n        description: ''\n      }\n    };\n\n    this.handleSave = async e => {\n      e.stopPropagation();\n      e.preventDefault();\n      const {\n        createEvent,\n        history\n      } = this.props;\n      const {\n        event\n      } = this.state;\n      await createEvent({ ...event\n      });\n      history.push('/');\n    };\n  }\n\n  handleChange(field, {\n    target: {\n      value\n    }\n  }) {\n    const {\n      event\n    } = this.state;\n    event[field] = value;\n    this.setState({\n      event\n    });\n  }\n\n  handleDateChange(field, value) {\n    this.handleChange(field, {\n      target: {\n        value: value.format()\n      }\n    });\n  }\n\n  render() {\n    const {\n      event\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui container raised very padded segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"ui header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, \"Create an event\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field required eight wide\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      value: event.name,\n      onChange: this.handleChange.bind(this, 'name'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field required eight wide\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"when\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, \"When\"), /*#__PURE__*/React.createElement(DatePicker, {\n      className: \"ui container\",\n      customInput: /*#__PURE__*/React.createElement(DateTimePickerCustomInput, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 42\n        }\n      }),\n      id: \"when\",\n      selected: moment(event.when),\n      onChange: this.handleDateChange.bind(this, 'when'),\n      peekNextMonth: true,\n      showMonthDropdown: true,\n      showYearDropdown: true,\n      dropdownMode: \"select\",\n      showTimeSelect: true,\n      timeFormat: \"hh:mm a\",\n      timeIntervals: 15,\n      dateFormat: \"LL LT\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field required eight wide\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"where\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, \"Where\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"where\",\n      value: event.where,\n      onChange: this.handleChange.bind(this, 'where'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field required eight wide\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      name: \"description\",\n      id: \"description\",\n      rows: \"10\",\n      value: event.description,\n      onChange: this.handleChange.bind(this, 'description'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"ui button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"or\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui positive button\",\n      onClick: this.handleSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, \"Save\"))));\n  }\n\n}\n\nNewEvent.defaultProps = {\n  createEvent: () => null\n};\nexport default graphql(MutationCreateEvent, {\n  props: props => ({\n    createEvent: event => {\n      return props.mutate({\n        update: (proxy, {\n          data: {\n            createEvent\n          }\n        }) => {\n          // Update QueryAllEvents\n          const query = QueryAllEvents;\n          const data = proxy.readQuery({\n            query\n          });\n          data.listEvents.items = [...data.listEvents.items.filter(e => e.id !== createEvent.id), createEvent];\n          proxy.writeQuery({\n            query,\n            data\n          }); // Create cache entry for QueryGetEvent\n\n          const query2 = QueryGetEvent;\n          const variables = {\n            id: createEvent.id\n          };\n          const data2 = {\n            getEvent: { ...createEvent\n            }\n          };\n          proxy.writeQuery({\n            query: query2,\n            variables,\n            data: data2\n          });\n        },\n        variables: event,\n        optimisticResponse: () => ({\n          createEvent: { ...event,\n            id: uuid(),\n            __typename: 'Event',\n            comments: {\n              __typename: 'CommentConnection',\n              items: []\n            }\n          }\n        })\n      });\n    }\n  })\n})(NewEvent);","map":{"version":3,"sources":["/Users/poprahul/workspace/frontend/amplify-apps/calandarApp/aws-mobile-appsync-events-starter-react/src/Components/NewEvent.js"],"names":["React","Component","Link","v4","uuid","graphql","QueryAllEvents","QueryGetEvent","MutationCreateEvent","DatePicker","moment","nearest15min","DateTimePickerCustomInput","NewEvent","state","event","name","when","format","where","description","handleSave","e","stopPropagation","preventDefault","createEvent","history","props","push","handleChange","field","target","value","setState","handleDateChange","render","bind","defaultProps","mutate","update","proxy","data","query","readQuery","listEvents","items","filter","id","writeQuery","query2","variables","data2","getEvent","optimisticResponse","__typename","comments"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { v4 as uuid } from \"uuid\";\nimport { graphql } from \"react-apollo\";\nimport QueryAllEvents from \"../GraphQL/QueryAllEvents\";\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport MutationCreateEvent from \"../GraphQL/MutationCreateEvent\";\n\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\n\nimport { nearest15min } from \"../Utils\";\nimport DateTimePickerCustomInput from \"./DateTimePickerCustomInput\";\n\nclass NewEvent extends Component {\n\n    static defaultProps = {\n        createEvent: () => null,\n    }\n\n    state = {\n        event: {\n            name: '',\n            when: nearest15min().format(),\n            where: '',\n            description: '',\n        }\n    };\n\n    handleChange(field, { target: { value } }) {\n        const { event } = this.state;\n\n        event[field] = value;\n\n        this.setState({ event });\n    }\n\n    handleDateChange(field, value) {\n        this.handleChange(field, { target: { value: value.format() } });\n    }\n\n    handleSave = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const { createEvent, history } = this.props;\n        const { event } = this.state;\n\n        await createEvent({ ...event });\n\n        history.push('/');\n    }\n\n    render() {\n        const { event } = this.state;\n\n        return (\n            <div className=\"ui container raised very padded segment\">\n                <h1 className=\"ui header\">Create an event</h1>\n                <div className=\"ui form\">\n                    <div className=\"field required eight wide\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input type=\"text\" id=\"name\" value={event.name} onChange={this.handleChange.bind(this, 'name')} />\n                    </div>\n                    <div className=\"field required eight wide\">\n                        <label htmlFor=\"when\">When</label>\n                        <DatePicker\n                            className=\"ui container\"\n                            customInput={<DateTimePickerCustomInput />}\n                            id=\"when\"\n                            selected={moment(event.when)}\n                            onChange={this.handleDateChange.bind(this, 'when')}\n                            peekNextMonth\n                            showMonthDropdown\n                            showYearDropdown\n                            dropdownMode=\"select\"\n                            showTimeSelect\n                            timeFormat=\"hh:mm a\"\n                            timeIntervals={15}\n                            dateFormat=\"LL LT\"\n                        />\n                    </div>\n                    <div className=\"field required eight wide\">\n                        <label htmlFor=\"where\">Where</label>\n                        <input type=\"text\" id=\"where\" value={event.where} onChange={this.handleChange.bind(this, 'where')} />\n                    </div>\n                    <div className=\"field required eight wide\">\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea name=\"description\" id=\"description\" rows=\"10\" value={event.description}\n                            onChange={this.handleChange.bind(this, 'description')}></textarea>\n                    </div>\n                    <div className=\"ui buttons\">\n                        <Link to=\"/\" className=\"ui button\">Cancel</Link>\n                        <div className=\"or\"></div>\n                        <button className=\"ui positive button\" onClick={this.handleSave}>Save</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default graphql(\n    MutationCreateEvent,\n    {\n        props: (props) => ({\n            createEvent: (event) => {\n                return props.mutate({\n                    update: (proxy, { data: { createEvent } }) => {\n                        // Update QueryAllEvents\n                        const query = QueryAllEvents;\n                        const data = proxy.readQuery({ query });\n\n                        data.listEvents.items = [...data.listEvents.items.filter(e => e.id !== createEvent.id), createEvent];\n\n                        proxy.writeQuery({ query, data });\n\n                        // Create cache entry for QueryGetEvent\n                        const query2 = QueryGetEvent;\n                        const variables = { id: createEvent.id };\n                        const data2 = { getEvent: { ...createEvent } };\n\n                        proxy.writeQuery({ query: query2, variables, data: data2 });\n                    },\n                    variables: event,\n                    optimisticResponse: () => ({\n                        createEvent: {\n                            ...event, id: uuid(), __typename: 'Event', comments: { __typename: 'CommentConnection', items: [] }\n                        }\n                    }),\n                })\n            }\n        })\n    }\n)(NewEvent);\n"]},"metadata":{},"sourceType":"module"}